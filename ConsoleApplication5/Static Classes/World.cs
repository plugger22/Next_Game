using System;
using System.Collections.Generic;
using Next_Game.Cartographic;
using System.Linq;
using RLNET;
using System.Diagnostics;

namespace Next_Game
{
    //handles living world for the game (data generated by History.cs at game start)
    public class World
    {
        static Random rnd;
        private List<Move> moveList; //list of characters moving through the world
        private readonly Queue<Snippet> messageQueue; //short term queue to display recent messages
        private Dictionary<int, Active> dictActiveActors; //list of all Player controlled actors keyed off actorID (non-activated followers aren't in dictionary)
        private Dictionary<int, Passive> dictPassiveActors; //list of all NPC actors keyed of actorID
        private Dictionary<int, Actor> dictAllActors; //list of all Actors keyed of actorID
        private Dictionary<int, MajorHouse> dictMajorHouses; //list of all Greathouses keyed off houseID
        private Dictionary<int, House> dictAllHouses; //list of all houses & special locations keyed off RefID
        private Dictionary<int, int> dictMajorHouseID; //list of Great Houses, unsorted (Key is House ID, value is # of bannerlords)
        private Dictionary<int, int> dictHousePower; // list of Great Houses, Sorted (key is House ID, value is # of bannerlords (power))
        private Dictionary<int, Record> dictRecords; //all historical records in a central collection (key is eventID)
        private Dictionary<int, Message> dictMessages; //all Player to Game & Game to Player messages
        private Dictionary<int, GeoCluster> dictGeoClusters; //all GeoClusters (key is geoID)
        private Dictionary<int, Skill> dictTraits; //all triats (key is traitID)
        private Dictionary<int, Possession> dictPossessions; //all possession (key is PossID)
        private Dictionary<int, Passive> dictRoyalCourt; //advisors and royal retainers (assumed to always be at Kingskeep) excludes family

        //default constructor
        public World(int seed)
        {
            rnd = new Random(seed);
            moveList = new List<Move>();
            messageQueue = new Queue<Snippet>();
            dictActiveActors = new Dictionary<int, Active>();
            dictPassiveActors = new Dictionary<int, Passive>();
            dictAllActors = new Dictionary<int, Actor>();
            dictMajorHouses = new Dictionary<int, MajorHouse>();
            dictAllHouses = new Dictionary<int, House>();
            dictMajorHouseID = new Dictionary<int, int>();
            dictHousePower = new Dictionary<int, int>();
            dictRecords = new Dictionary<int, Record>();
            dictMessages = new Dictionary<int, Message>();
            dictGeoClusters = new Dictionary<int, GeoCluster>();
            dictTraits = new Dictionary<int, Skill>();
            dictPossessions = new Dictionary<int, Possession>();
            dictRoyalCourt = new Dictionary<int, Passive>();
        }


        /// <summary>
        /// main method to initialise all world collections
        /// </summary>
        public void InitialiseWorld()
        {
            Stopwatch timer_2 = new Stopwatch();
            timer_2.Start();
            InitialiseGeoClusters();
            Game.StopTimer(timer_2, "W: InitialiseGeoClusters");
            timer_2.Start();
            InitialiseActiveActors(Game.history.GetActiveActors());
            Game.StopTimer(timer_2, "W: InitiatePlayerActors");
            timer_2.Start();
            InitialiseHouses();
            Game.StopTimer(timer_2, "W: InitialiseHouses");
            timer_2.Start();
            InitialiseTraits();
            Game.StopTimer(timer_2, "W: InitialiseTraits");
            timer_2.Start();
            //need to be here for sequencing issues
            Game.history.InitialiseOverthrow(dictPassiveActors);
            Game.history.InitialiseLordRelations();
            Game.history.InitialisePastHistoryHouses();
            Game.StopTimer(timer_2, "W: InitialiseHistory");
            timer_2.Start();
            InitialiseSecrets();
            Game.StopTimer(timer_2, "W: InitialiseSecrets");
        }

        /// <summary>
        /// Sets up actors in dictionaries and places them on the map.
        /// </summary>
        /// <param name="listOfActiveActors"></param>
        internal void InitialiseActiveActors(List<Active> listOfActiveActors)
        {
            
            int numFollowers = Game.constant.GetValue(Global.NUM_FOLLOWERS);
            int locID, index;
            
            for (int i = 0; i <= numFollowers; i++)
            {
                if (i > 0)
                {
                    //choose a random follower
                    index = rnd.Next(0, listOfActiveActors.Count);
                    Follower follower = (Follower)listOfActiveActors[index];
                    if (follower != null)
                    {
                        //remove from list
                        listOfActiveActors.RemoveAt(index);
                        //add to list and Dictionaries in World
                        Game.world.SetActiveActor(follower);
                        //assign to random location on map
                        locID = Game.network.GetRandomLocation();
                        Location loc = Game.network.GetLocation(locID);
                        //place characters at Location
                        follower.LocID = locID;
                        follower.SetActorPosition(loc.GetPosition());
                        //set to activated
                        follower.Activated = true;
                        //add to Location list of Characters
                        loc.AddActor(follower.ActID);
                    }
                    else
                    { Game.SetError(new Error(63, "Invalid Actor in listOfActiveActors")); }
                }
                else
                {
                    //player (first in list)
                    Player player = (Player)listOfActiveActors[0];
                    if (player != null)
                    {
                        //player goes in first
                        Game.world.SetActiveActor(player);
                        listOfActiveActors.RemoveAt(0);
                        //assign to random location on map -> EDIT: Already done in history.cs InitialisePlayer
                        /*locID = Game.network.GetRandomLocation();
                        Location loc = Game.network.GetLocation(locID);
                        //place characters at Location
                        player.LocID = locID;
                        player.SetActorPosition(loc.GetPosition());
                        //add to Location list of Characters
                        loc.AddActor(player.ActID);*/
                    }
                    else
                    { Game.SetError(new Error(63, "Invalid Player in listOfActiveActors")); }
                }
            }
        }

        /// <summary>
        /// Initiate character Movement (creates a Move object)
        /// </summary>
        /// <param name="charID">Character</param>
        /// <param name="posOrigin"></param>
        /// <param name="posDestination"></param>
        /// <param name="path">sequenced List of Positions to destination</param>
        internal string InitiateMoveActors(int charID, Position posOrigin, Position posDestination, List<Position> path)
        {
            string returnText = "Error in World.InitiateMoveCharacters";
            //viable Character & Position?
            if (charID > 0 && posOrigin != null && posDestination != null && path != null)
            {
                //find in dictionary
                if (dictActiveActors.ContainsKey(charID))
                {
                    
                    Active person = dictActiveActors[charID];
                    List<int> party = new List<int>(); //list of charID's of all characters in party
                    party.Add(charID);
                    string name = person.Name;
                    int speed = person.Speed;
                    int distance = path.Count;
                    int time = (distance / speed) + 1; //prevents 0 result
                    string originLocation = GetLocationName(posOrigin);
                    string destinationLocation = GetLocationName(posDestination);
                    returnText = string.Format("It will take {0} days for {1} to travel from {2} to {3}. The Journey has commenced.", time, name, originLocation, destinationLocation);
                    //remove character from current location 
                    int locID_Origin = Game.map.GetMapInfo(MapLayer.LocID, posOrigin.PosX, posOrigin.PosY);
                    Location loc = Game.network.GetLocation(locID_Origin);
                    if (loc != null)
                    {
                        loc.RemoveActor(charID);
                        //create new move object
                        Move moveObject = new Move(path, party, speed, true, Game.gameTurn);
                        //insert into moveList
                        moveList.Add(moveObject);
                        //update character status to 'travelling'
                        person.Status = ActorStatus.Travelling;
                        //update characterLocationID (now becomes destination)
                        int locID_Destination = Game.map.GetMapInfo(MapLayer.LocID, posDestination.PosX, posDestination.PosY);
                        person.LocID = locID_Destination;
                    }
                    else
                    { returnText = "ERROR: The Journey has been cancelled (world.InitiateMoveCharacters"; }
                }
            }
            return returnText;
        }

        /// <summary>
        /// Handles movement of all Player characters througout world
        /// </summary>
        /// <returns>returns a dictionary of mapMarkers and coordinates for the "Player" mapGrid layer</returns>
        internal Dictionary<Position, int> MoveActors()
        {
            //create a dictionary of position and map markers to return (passed up to game thence to map to update mapgrid
            Dictionary<Position, int> dictMapMarkers = new Dictionary<Position, int>();
            //loop moveList. Update each move object - update Character Location ID
            for(int i = 0; i < moveList.Count; i++)
            {
                //move speed clicks down list of positions (ignore locations at present)
                Move moveObject = new Move();
                moveObject = moveList[i];
                moveObject.UpdatePartyStatus();
                if (moveObject.Status == PartyStatus.Active)
                {
                    if (moveObject.MoveParty() == true)
                    {
                        //update location list at destination
                        Position posDestination = moveObject.GetCurrentPosition();
                        int locID = Game.map.GetMapInfo(MapLayer.LocID, posDestination.PosX, posDestination.PosY);
                        Location loc = Game.network.GetLocation(locID);
                        List<int> charListMoveObject = new List<int>(moveObject.GetCharacterList());
                        //find location, get list, update for each character
                        if (loc != null)
                        {
                            foreach (int charID in charListMoveObject)
                            {
                                loc.AddActor(charID);
                                //find character and update details
                                if (dictActiveActors.ContainsKey(charID))
                                {
                                    Active person = new Active();
                                    person = dictActiveActors[charID];
                                    person.Status = ActorStatus.AtLocation;
                                    person.SetActorPosition(posDestination);
                                    person.LocID = locID;
                                    Message message = new Message(string.Format("{0}, Aid {1}, has arrived safely at {2}", person.Name, person.ActID, loc.LocName), person.ActID,
                                        loc.LocationID, MessageType.Move);
                                    SetMessage(message);
                                }
                                else
                                { Game.SetError(new Error(42, "Character not found")); }
                            }
                        }
                        else
                        { Game.SetError(new Error(42, "Character not found")); }
                        //update Party status to enable deletion of moveObject from list (below)
                        moveObject.Status = PartyStatus.Done;
                    }
                    else
                    //still enroute
                    {
                        //update dictionary
                        dictMapMarkers.Add(moveObject.GetCurrentPosition(), moveObject.MapMarker);
                        //update Characters in list (charPos)
                        Position pos = moveObject.GetCurrentPosition();
                        List<int> characterList = new List<int>(moveObject.GetCharacterList());
                        for (int j = 0; j < characterList.Count; j++)
                        {
                            int charID = characterList[j];
                            //find in dictionary
                            if (dictActiveActors.ContainsKey(charID))
                            {
                                Active person = dictActiveActors[charID];
                                person.SetActorPosition(pos);
                            }
                        }
                    }
                }
                else if (moveObject.Status == PartyStatus.Delayed)
                {
                    /*message about delay?*/
                    dictMapMarkers.Add(moveObject.GetCurrentPosition(), moveObject.MapMarker);
                }
            }
            //reverse loop through list of Moveobjects and delete any that are marked as 'Done'
            for(int i = moveList.Count; i > 0; i--)
            {
                if (moveList[i - 1].Status == PartyStatus.Done)
                {
                    try
                    { moveList.RemoveAt(i - 1); }
                    catch (Exception e)
                    { Game.SetError(new Error(61, e.Message)); }
                }
            }
            //pass dictionary of markers back to map object via Game
            return dictMapMarkers;
        }

      
        /// <summary>
        /// Returns a list of characters in string format to pass to InfoChannel to display in multi-Console
        /// </summary>
        /// <returns>List with info on each character a single, sequential, entry in the list</returns>
        /// <param name="locationsOnly">If true only show those at Locations, default is show all</param>
        public List<Snippet> ShowActiveActorsRL(bool locationsOnly = false)
        {
            List<Snippet> listToDisplay = new List<Snippet>();
            //listToDisplay.Add(new Snippet($"Day of our Lord {GameTurn}", RLColor.Yellow, RLColor.Black));
            listToDisplay.Add(new Snippet("--- Player Characters", RLColor.Yellow, RLColor.Black));
            int status, chance;
            int locID;
            string locName;
            string coordinates, distText, crowText;
            string locStatus = "who knows?";
            string charString; //overall string
            RLColor textColor = RLColor.White;

            foreach (var actor in dictActiveActors)
            {
                status = (int)actor.Value.Status;
                locID = actor.Value.LocID;
                locName = GetLocationName(locID);
                if (status == (int)ActorStatus.AtLocation)
                { locStatus = "At " + locName; }
                else if (status == (int)ActorStatus.Travelling)
                { locStatus = "Moving to " + locName; }
                //get location coords
                Location loc = Game.network.GetLocation(locID);
                //only show chosen characters (at Location or not depending on parameter)
                if (locationsOnly == true && status == (int)ActorStatus.AtLocation || !locationsOnly)
                {
                    Position pos = actor.Value.GetActorPosition();
                    coordinates = string.Format("(Loc {0}:{1})", pos.PosX, pos.PosY);
                    if (actor.Value is Player)
                    {
                        //player (no distance display)
                        textColor = Color._player;
                        charString = string.Format("Aid {0,-2} {1,-18} {2,-30}{3,-15}", actor.Key, actor.Value.Name, locStatus, coordinates);
                    }
                    else
                    {
                        if (actor.Value.Delay == 0)
                        {
                            if (actor.Value.Activated == true) { textColor = Color._active; }
                            else { textColor = RLColor.White; }
                        }
                        else { textColor = RLColor.LightGray; }
                        //distance = Game.utility.GetDistance(posPlayer.PosX, posPlayer.PosY, pos.PosX, pos.PosY);
                        distText = string.Format("{0} {1}", "dist:", actor.Value.CrowDistance);
                        chance = actor.Value.CrowChance + actor.Value.CrowBonus;
                        chance = Math.Min(100, chance);
                        crowText = string.Format("{0} {1}{2}", "crow:", chance, "%");
                        charString = string.Format("Aid {0,-2} {1,-18} {2,-30}{3,-15} {4,-9} {5,-9}", actor.Key, actor.Value.Name, locStatus, coordinates, distText, crowText);
                    }
                    listToDisplay.Add(new Snippet(charString, textColor, RLColor.Black));
                }
            }
            return listToDisplay;
        }


        /// <summary>
        /// Display a single Actor in detail
        /// </summary>
        /// <param name="ActID"></param>
        /// <returns></returns>
        public List<Snippet> ShowActorRL(int actorID)
        {
            List<Snippet> listToDisplay = new List<Snippet>();
            Actor person = new Actor();
            string actorType;
            if (dictAllActors.TryGetValue(actorID, out person))
            {
                int locID = person.LocID;
                //advisors can be one of three different categories
                if (person is Advisor) { actorType = GetAdvisorType((Advisor)person); }
                else { actorType = Convert.ToString(person.Type); }
                if ((int)person.Office > 0)
                { actorType = Convert.ToString(person.Office); }
                string name = string.Format("{0} {1}", actorType, person is Follower ? "\"" + person.Name + "\"" : person.Name);
                string handle = null;
                bool newLine = true;
                //nickname
                if (person.Handle != null && person.Age >= 15)
                {
                    newLine = false;
                    handle = string.Format(" \"{0}\"", person.Handle);
                }
                RLColor color = RLColor.White;
                RLColor locColor = RLColor.White;
                string locString = "?";
                //location descriptor
                switch(person.Status)
                {
                    case ActorStatus.AtLocation:
                        locString = string.Format("Located at {0} {1}, Lid {2}", GetLocationName(locID), ShowLocationCoords(locID), locID);
                        break;
                    case ActorStatus.Travelling:
                        Position pos = person.GetActorPosition();
                        locString = string.Format("Currently at {0}:{1}, travelling towards {2} {3}, Lid {4}", pos.PosX, pos.PosY, GetLocationName(locID), ShowLocationCoords(locID), locID);
                        break;
                    case ActorStatus.Gone:
                        locString = string.Format("Passed away ({0}) in {1}", person.ReasonGone, person.Gone);
                        locColor = RLColor.Red;
                        break;
                }
                listToDisplay.Add(new Snippet(name, RLColor.Yellow, RLColor.Black, false));
                //nickname (show as White)?
                if (handle != null)
                { listToDisplay.Add(new Snippet(handle, Color._star, RLColor.Black, false)); }
                //actorID
                listToDisplay.Add(new Snippet(string.Format(", Aid {0}", actorID), RLColor.Yellow, RLColor.Black));
                //realm
                if ((int)person.Realm > 0)
                { listToDisplay.Add(new Snippet(string.Format("Realm Title: {0}", person.Realm))); }
                //office
                if ((int)person.Office > 0)
                { listToDisplay.Add(new Snippet(string.Format("Office: {0}", person.Office), RLColor.Yellow, RLColor.Black)); }
                listToDisplay.Add(new Snippet(locString, locColor, RLColor.Black));
                //Delayed
                if (person.Delay > 0)
                { listToDisplay.Add(new Snippet(string.Format("Delayed (\"{0}\") for {1} {2}", person.DelayReason, person.Delay, person.Delay == 1 ? "turn" : "turns"), RLColor.LightRed, RLColor.Black)); }
                if (person is Knight)
                {
                    Knight knight = person as Knight;
                    string houseName;
                    if (knight.HouseID == Game.lore.OldHouseID) { houseName = Game.lore.OldHouseName; }
                    //deals with case of knight belonging to old King (he's been deleted from dictMajorHouses)
                    else { houseName = GetMajorHouseName(knight.HouseID); }
                    listToDisplay.Add(new Snippet(string.Format("Has sworn allegiance to House {0}", houseName )));
                }
                //Loyalty
                if (person is Passive)
                { listToDisplay.Add(new Snippet(string.Format("Loyal to the {0} (originally {1})", person.Loyalty_Current, person.Loyalty_AtStart))); }
                listToDisplay.Add(new Snippet(string.Format("{0} y.o {1}, born {2}", person.Age, person.Sex, person.Born)));
                
                //stats - natural ---
                string effectText = null;
                int influencer = person.Influencer;
                string influenceActor = null;
                string influenceText = null;
                bool influenceDisplay = false;
                int abilityStars;
                RLColor traitColor;
                SkillType trait;
                if (influencer > 0)
                { Passive infl_actor = GetPassiveActor(influencer); influenceActor = Convert.ToString(infl_actor.Type) + " " + infl_actor.Name; }
                //age of actor
                SkillAge age = SkillAge.Fifteen;
                if (person.Age >= 5 && person.Age < 15)
                { age = SkillAge.Five; }
                //only show abilities if age >= 5 & not dead
                if (person.Age >= 5)
                {
                    //header
                    listToDisplay.Add(new Snippet("Abilities (some at 5 y.o, all at 15 y.o)", RLColor.Brown, RLColor.Black));

                    //combat
                    trait = SkillType.Combat;
                    effectText = person.GetTraitEffectText(trait, age);
                    if (influencer > 0 && locID > 0 && CheckActorPresent(influencer, locID) /* && person.CheckSkillInfluenced(trait)*/)
                    {
                        abilityStars = person.GetSkill(trait, age);
                        influenceText = string.Format(" influenced by {0} {1}", influenceActor, person.GetTraitEffectText(trait, age));
                        influenceDisplay = true;
                    }
                    else { abilityStars = person.GetSkill(trait, age); influenceText = null; influenceDisplay = false; }
                    effectText += influenceText;
                    if (abilityStars < 3) { traitColor = Color._badTrait; }
                    else if (abilityStars == 3) { traitColor = Color._star; }
                    else { traitColor = Color._goodTrait; }
                    //display
                    newLine = true;
                    if (abilityStars != 3 || influenceDisplay == true)
                    { newLine = false; }
                    if ((age == SkillAge.Five && abilityStars != 3) || age == SkillAge.Fifteen)
                    {
                        listToDisplay.Add(new Snippet(string.Format("{0, -16}", "Combat"), false));
                        listToDisplay.Add(new Snippet(string.Format("{0, -12}", GetStars(abilityStars)), Color._star, RLColor.Black, newLine));
                        if (abilityStars != 3 || influenceDisplay == true)
                        { listToDisplay.Add(new Snippet(string.Format("{0} {1}", person.arrayOfTraitNames[(int)trait], effectText), traitColor, RLColor.Black)); }
                    }

                    //Wits
                    trait = SkillType.Wits;
                    effectText = person.GetTraitEffectText(trait, age);
                    if (influencer > 0 && locID > 0 && CheckActorPresent(influencer, locID)/* && person.CheckSkillInfluenced(trait)*/)
                    {
                        abilityStars = person.GetSkill(trait, age);
                        influenceText = string.Format(" influenced by {0} {1}", influenceActor, person.GetTraitEffectText(trait, age));
                        influenceDisplay = true;
                    }
                    else { abilityStars = person.GetSkill(trait, age); influenceText = null; influenceDisplay = false; }
                    effectText += influenceText;
                    if (abilityStars < 3) { traitColor = Color._badTrait; }
                    else if (abilityStars == 3) { traitColor = Color._star; }
                    else { traitColor = Color._goodTrait; }
                    //display
                    newLine = true;
                    if (abilityStars != 3 || influenceDisplay == true)
                    { newLine = false; }
                    if ((age == SkillAge.Five && abilityStars != 3) || age == SkillAge.Fifteen)
                    {
                        listToDisplay.Add(new Snippet(string.Format("{0, -16}", "Wits"), false));
                        listToDisplay.Add(new Snippet(string.Format("{0, -12}", GetStars(abilityStars)), Color._star, RLColor.Black, newLine));
                        if (abilityStars != 3 || influenceDisplay == true)
                        {  listToDisplay.Add(new Snippet(string.Format("{0} {1}", person.arrayOfTraitNames[(int)trait], effectText), traitColor, RLColor.Black)); }
                    }

                    //charm
                    trait = SkillType.Charm;
                    effectText = person.GetTraitEffectText(trait, age);
                    if (influencer > 0 && locID > 0 && CheckActorPresent(influencer, locID)/* && person.CheckSkillInfluenced(trait)*/)
                    {
                        abilityStars = person.GetSkill(trait, age);
                        influenceText = string.Format(" influenced by {0} {1}", influenceActor, person.GetTraitEffectText(trait, age));
                        influenceDisplay = true;
                    }
                    else { abilityStars = person.GetSkill(trait, age); influenceText = null; influenceDisplay = false; }
                    effectText += influenceText;
                    if (abilityStars < 3) { traitColor = Color._badTrait; }
                    else if (abilityStars == 3) { traitColor = Color._star; }
                    else { traitColor = Color._goodTrait; }
                    //display
                    newLine = true;
                    if (abilityStars != 3 || influenceDisplay == true)
                    { newLine = false; }
                    if ((age == SkillAge.Five && abilityStars != 3) || age == SkillAge.Fifteen)
                    {
                        listToDisplay.Add(new Snippet(string.Format("{0, -16}", "Charm"), false));
                        listToDisplay.Add(new Snippet(string.Format("{0, -12}", GetStars(abilityStars)), Color._star, RLColor.Black, newLine));
                        if (abilityStars != 3 || influenceDisplay == true)
                        { listToDisplay.Add(new Snippet(string.Format("{0} {1}", person.arrayOfTraitNames[(int)trait], effectText), traitColor, RLColor.Black)); }
                    }

                    //treachery
                    trait = SkillType.Treachery;
                    effectText = person.GetTraitEffectText(trait, age);
                    if (influencer > 0 && locID > 0 && CheckActorPresent(influencer, locID)/* && person.CheckSkillInfluenced(trait)*/)
                    {
                        abilityStars = person.GetSkill(trait, age);
                        influenceText = string.Format(" influenced by {0} {1}", influenceActor, person.GetTraitEffectText(trait, age));
                        influenceDisplay = true;
                    }
                    else { abilityStars = person.GetSkill(trait, age); influenceText = null; influenceDisplay = false; }
                    effectText += influenceText;
                    if (abilityStars < 3) { traitColor = Color._badTrait; }
                    else if (abilityStars == 3) { traitColor = Color._star; }
                    else { traitColor = Color._goodTrait; }
                    //display
                    newLine = true;
                    if (abilityStars != 3 || influenceDisplay == true)
                    { newLine = false; }
                    if ((age == SkillAge.Five && abilityStars != 3) || age == SkillAge.Fifteen)
                    {
                        listToDisplay.Add(new Snippet(string.Format("{0, -16}", "Treachery"), false));
                        listToDisplay.Add(new Snippet(string.Format("{0, -12}", GetStars(abilityStars)), Color._star, RLColor.Black, newLine));
                        if (abilityStars != 3 || influenceDisplay == true)
                        { listToDisplay.Add(new Snippet(string.Format("{0} {1}", person.arrayOfTraitNames[(int)trait], effectText), traitColor, RLColor.Black)); }
                    }

                    //Leadership
                    trait = SkillType.Leadership;
                    effectText = person.GetTraitEffectText(trait, age);
                    if (influencer > 0 && locID > 0 && CheckActorPresent(influencer, locID)/* && person.CheckSkillInfluenced(trait)*/)
                    {
                        abilityStars = person.GetSkill(trait, age);
                        influenceText = string.Format(" influenced by {0} {1}", influenceActor, person.GetTraitEffectText(trait, age));
                        influenceDisplay = true;
                    }
                    else { abilityStars = person.GetSkill(trait, age); influenceText = null; influenceDisplay = false; }
                    effectText += influenceText;
                    if (abilityStars < 3) { traitColor = Color._badTrait; }
                    else if (abilityStars == 3) { traitColor = Color._star; }
                    else { traitColor = Color._goodTrait; }
                    //display
                    newLine = true;
                    if (abilityStars != 3 || influenceDisplay == true)
                    { newLine = false; }
                    if ((age == SkillAge.Five && abilityStars != 3) || age == SkillAge.Fifteen)
                    {
                        listToDisplay.Add(new Snippet(string.Format("{0, -16}", "Leadership"), false));
                        listToDisplay.Add(new Snippet(string.Format("{0, -12}", GetStars(abilityStars)), Color._star, RLColor.Black, newLine));
                        if (abilityStars != 3 || influenceDisplay == true)
                        { listToDisplay.Add(new Snippet(string.Format("{0} {1}", person.arrayOfTraitNames[(int)trait], effectText), traitColor, RLColor.Black)); }
                    }

                    //Touched
                    if (person.Touched > 0)
                    {
                        trait = SkillType.Touched;
                        effectText = person.GetTraitEffectText(trait, age);
                        if (influencer > 0 && locID > 0 && CheckActorPresent(influencer, locID)/* && person.CheckSkillInfluenced(trait)*/)
                        {
                            abilityStars = person.GetSkill(trait, age);
                            influenceText = string.Format(" influenced by {0} {1}", influenceActor, person.GetTraitEffectText(trait, age));
                            influenceDisplay = true;
                        }
                        else { abilityStars = person.GetSkill(trait, age); influenceText = null; influenceDisplay = false; }
                        effectText += influenceText;
                        if (abilityStars < 3) { traitColor = Color._badTrait; }
                        else if (abilityStars == 3) { traitColor = Color._star; }
                        else { traitColor = Color._goodTrait; }
                        //display
                        newLine = true;
                        if (abilityStars != 3 || influenceDisplay == true)
                        { newLine = false; }
                        if ((age == SkillAge.Five && abilityStars != 3) || age == SkillAge.Fifteen)
                        {
                            listToDisplay.Add(new Snippet(string.Format("{0, -16}", "Touched"), false));
                            listToDisplay.Add(new Snippet(string.Format("{0, -12}", GetStars(abilityStars)), Color._star, RLColor.Black, newLine));
                            if (abilityStars != 3 || influenceDisplay == true)
                            { listToDisplay.Add(new Snippet(string.Format("{0} {1}", person.arrayOfTraitNames[(int)trait], effectText), traitColor, RLColor.Black)); }
                        }
                    }
                }
                //Conditions
                if (person.CheckConditions() == true)
                {
                    List<Condition> tempConditions = person.GetConditions();
                    listToDisplay.Add(new Snippet("Conditions (additional Skill modifiers)", RLColor.Brown, RLColor.Black));
                    string tempCondition_0, tempCondition_1;
                    RLColor tempColor = RLColor.White;
                    foreach(Condition condition in tempConditions)
                    {
                        if (condition.Timer != 999)
                        { tempCondition_0 = string.Format("\"{0}\", {1} day{2}", condition.Text, condition.Timer, condition.Timer == 1 ? "" : "s"); }
                        else { tempCondition_0 = string.Format("\"{0}\"", condition.Text); }
                        tempCondition_1 = string.Format("{0} ({1}{2})", condition.Skill, condition.Effect > 0 ? "+" : "", condition.Effect);
                        if (condition.Effect > 0) { tempColor = Color._goodTrait; }
                        else { tempColor = Color._badTrait; }
                        listToDisplay.Add(new Snippet(string.Format("{0, -28}",tempCondition_0), false));
                        listToDisplay.Add(new Snippet(string.Format("{0}", tempCondition_1), tempColor, RLColor.Black));
                    }
                }
                //Crow explanation for loyal followers
                if (person is Follower)
                {
                    Active tempPerson = person as Active;
                    List<string> tempList = tempPerson.GetCrowTooltips();
                    if (tempList.Count > 0)
                    {
                        listToDisplay.Add(new Snippet("Crow Explanation", RLColor.Brown, RLColor.Black));
                        foreach (string tip in tempList)
                        { listToDisplay.Add(new Snippet(tip)); }
                        if (tempPerson.Activated == true)
                        { listToDisplay.Add(new Snippet("Activated", RLColor.Yellow, RLColor.Black)); }
                        else
                        { listToDisplay.Add(new Snippet("Not activated", RLColor.Red, RLColor.Black)); }
                    }
                }
                //relationships
                if (!(person is Player))
                {
                    listToDisplay.Add(new Snippet("Relationships", RLColor.Brown, RLColor.Black));
                    //with Player
                    int relStars = person.GetRelPlyrStars();
                    listToDisplay.Add(new Snippet(string.Format("{0, -16}", "Player"), false));
                    listToDisplay.Add(new Snippet(string.Format("{0, -12}", GetStars(relStars)), RLColor.LightRed, RLColor.Black, false));
                    int change = person.GetPlayerChange();
                    int relPlyr = person.GetRelPlyr();
                    string tagText = string.Format("(Change {0}{1})", change > 0 ? "+" : "", change);
                    if (change == 0) { tagText = ""; }
                    RLColor tagColor = Color._badTrait;
                    if ( relPlyr >= 50) { tagColor = Color._goodTrait; }
                    listToDisplay.Add(new Snippet(string.Format("{0}, Rel {1}, {2}", person.GetPlayerTag(), relPlyr, tagText), 
                        tagColor ,RLColor.Black, true));
                    //with Lord
                    if (person.Type != ActorType.Lord && person is Passive)
                    {
                        relStars = person.GetRelLordStars();
                        listToDisplay.Add(new Snippet(string.Format("{0, -16}", "Lord"), false));
                        listToDisplay.Add(new Snippet(string.Format("{0, -12}", GetStars(relStars)), RLColor.LightRed, RLColor.Black, false));
                        change = person.GetLordChange();
                        int relLord = person.GetRelLord();
                        tagText = string.Format("(Change {0}{1})", change > 0 ? "+" : "", change);
                        if (change == 0) { tagText = ""; }
                        tagColor = Color._badTrait;
                        if (relLord >= 50) { tagColor = Color._goodTrait; }
                        listToDisplay.Add(new Snippet(string.Format("{0}, Rel {1}, {2}", person.GetLordTag(), relLord, tagText),
                            tagColor, RLColor.Black, true));
                    }
                }
                //Possessions -> active followers
                if (person is Active)
                {
                    Active tempPerson = person as Active;
                    int resources = tempPerson.Resources;
                    resources = Math.Min(5, resources);
                    //resources = Math.Max(1, resources);
                    listToDisplay.Add(new Snippet("Possessions", RLColor.Brown, RLColor.Black));
                    listToDisplay.Add(new Snippet(string.Format("{0, -16}", "Resources"), false));
                    listToDisplay.Add(new Snippet(string.Format("{0, -12}", GetStars(resources)), RLColor.LightRed, RLColor.Black, false));
                    listToDisplay.Add(new Snippet(string.Format("{0}", (ResourceLevel)resources), true));
                }
                //Possessions -> Lords and BannerLords
                else if (person.Type == ActorType.Lord || person.Type == ActorType.BannerLord)
                {
                    int resources = person.Resources;
                    resources = Math.Min(5, resources);
                    //resources = Math.Max(1, resources);
                    listToDisplay.Add(new Snippet("Possessions", RLColor.Brown, RLColor.Black));
                    listToDisplay.Add(new Snippet(string.Format("{0, -16}", "Resources"), false));
                    listToDisplay.Add(new Snippet(string.Format("{0, -12}", GetStars(resources)), RLColor.LightRed, RLColor.Black, false));
                    listToDisplay.Add(new Snippet(string.Format("{0}", (ResourceLevel)resources), true));
                }
                
                //family
                SortedDictionary<int, ActorRelation> dictTempFamily = null;
                if (person is Noble) { Noble tempPerson = person as Noble; dictTempFamily = tempPerson.GetFamily(); }
                else if (person is Player) { Player tempPerson = person as Player; dictTempFamily = tempPerson.GetFamily(); }
                if (dictTempFamily != null)
                {
                    //SortedDictionary<int, ActorRelation> dictTempFamily = tempFamilyPerson.GetFamily();
                    if (dictTempFamily?.Count > 0)
                    {
                        listToDisplay.Add(new Snippet("Family", RLColor.Brown, RLColor.Black));
                        string maidenName;
                        foreach (KeyValuePair<int, ActorRelation> kvp in dictTempFamily)
                        {
                            Noble relPerson = (Noble)GetPassiveActor(kvp.Key);
                            RLColor familyColor = RLColor.White;
                            if (relPerson.Status == ActorStatus.Gone)
                            { familyColor = RLColor.LightGray; }
                            maidenName = "";
                            if (relPerson.MaidenName != null)
                            { maidenName = string.Format(" (nee {0})", relPerson.MaidenName); }
                            int relAge = Game.gameStart - relPerson.Born;
                            string houseName;
                            //needed 'cause old King's house has been removed from the dictionaries
                            if (relPerson.HouseID == Game.lore.OldHouseID)
                            { houseName = Game.lore.OldHouseName; }
                            else { houseName = GetMajorHouseName(relPerson.HouseID); }
                            string text = string.Format("{0} Aid {1}: {2} {3}{4} of House {5}, Age {6}",
                              kvp.Value, relPerson.ActID, relPerson.Type, relPerson.Name, maidenName, houseName, relAge);

                            listToDisplay.Add(new Snippet(text, familyColor, RLColor.Black));
                        }
                    }
                }

                //secrets
                List<int> listOfSecrets = person.GetSecrets();
                if (listOfSecrets.Count > 0)
                {
                    listToDisplay.Add(new Snippet("Secrets", RLColor.Brown, RLColor.Black));
                    foreach (int possessionID in listOfSecrets)
                    {
                        Secret secret = (Secret)GetPossession(possessionID);
                        if (secret != null)
                        {
                            listToDisplay.Add(new Snippet(string.Format("{0} {1} ", secret.Year, secret.Description), false));
                            listToDisplay.Add(new Snippet(string.Format("{0}", GetStars(secret.Strength)), RLColor.LightRed, RLColor.Black));
                        }
                    }
                }

                //player specific Soft possessions - Favours & Introductions
                if (person is Player)
                {
                    Player player = person as Player;
                    //favours (Player only)
                    List<int> listOfFavours = player.GetFavours();
                    if (listOfFavours.Count > 0)
                    {
                        listToDisplay.Add(new Snippet("Favours", RLColor.Brown, RLColor.Black));
                        foreach (int possessionID in listOfFavours)
                        {
                            Favour favour = (Favour)GetPossession(possessionID);
                            if (favour != null)
                            {
                                listToDisplay.Add(new Snippet(string.Format("{0} {1} ", favour.Year, favour.Description), false));
                                listToDisplay.Add(new Snippet(string.Format("{0}", GetStars(favour.Strength)), RLColor.LightRed, RLColor.Black));
                            }
                        }
                    }
                    //Introductions (Player only)
                    List<int> listOfIntroductions = player.GetIntroductions();
                    if (listOfIntroductions.Count > 0)
                    {
                        listToDisplay.Add(new Snippet("Introductions", RLColor.Brown, RLColor.Black));
                        foreach (int possessionID in listOfIntroductions)
                        {
                            Introduction introduction = (Introduction)GetPossession(possessionID);
                            if (introduction != null)
                            {
                                listToDisplay.Add(new Snippet(string.Format("{0} {1} ", introduction.Year, introduction.Description), false));
                                listToDisplay.Add(new Snippet(string.Format("{0}", GetStars(introduction.Strength)), RLColor.LightRed, RLColor.Black));
                            }
                        }
                    }
                }

                //personal history
                List<string> actorHistory = new List<string>();
                if (person is Player)
                {
                    //Player -> get original (pre-game start history)
                    Player player = person as Player;
                    actorHistory = GetActorRecords(player.HistoryID);
                }
                actorHistory.AddRange(GetActorRecords(person.ActID));
                if (actorHistory.Count > 0)
                {
                    listToDisplay.Add(new Snippet("Personal History", RLColor.Brown, RLColor.Black));
                    foreach (string text in actorHistory)
                    { listToDisplay.Add(new Snippet(text)); }
                }

                //Relationship records
                if ((person is Player) == false)
                {
                    //with Player
                    List<Relation> playerRelations = person.GetRelEventPlyr();
                    if (playerRelations.Count > 0)
                    {
                        listToDisplay.Add(new Snippet("Relationship History with Player", RLColor.Brown, RLColor.Black));
                        foreach (Relation relationship in playerRelations)
                        { listToDisplay.Add(new Snippet(relationship.GetRelationText())); }
                    }
                    //with Lord
                    List<Relation> lordRelations = person.GetRelEventLord();
                    lordRelations = person.GetRelEventLord();
                    if (lordRelations.Count > 0)
                    {
                        listToDisplay.Add(new Snippet("Relationship History with Lord", RLColor.Brown, RLColor.Black));
                        foreach (Relation relationship in lordRelations)
                        { listToDisplay.Add(new Snippet(relationship.GetRelationText())); }
                    }
                }

            }
            else
            { listToDisplay.Add(new Snippet(string.Format("No Character with ID {0} exists", actorID ), RLColor.LightRed, RLColor.Black)); }
            
            return listToDisplay;
        }


        /// <summary>
        /// creates a string showing the number of stars for traits, secrets, etc.
        /// </summary>
        /// <param name="num">number of stars</param>
        /// <returns></returns>
        internal string GetStars(int num)
        {
            string stars = null;
            num = Math.Min(5, num);
            num = Math.Max(1, num);
            for (int i = 0; i < num; i++)
            { stars += "o "; }
            return stars;
        }


        /// <summary>
        /// used to display character data when first selected by a # key in main menu
        /// </summary>
        /// <param name="inputConsole"></param>
        /// <param name="consoleDisplay"></param>
        /// <param name="charID"></param>
        public Snippet ShowSelectedActor(int charID)
        {
            string returnText = "Character NOT KNOWN";
            //find in dictionary
            if (dictActiveActors.ContainsKey(charID))
            {
                Actor person = dictActiveActors[charID];
                Position pos = person.GetActorPosition();
                returnText = person.Name + " at ";
                returnText += this.GetLocationName(person.LocID);
                returnText += string.Format(" ({0}:{1}) has been selected", pos.PosX, pos.PosY);
            }
            return new Snippet(returnText);
        }

        internal string GetLocationName(int locID)
        {
            string locName = null;
            Location loc = Game.network.GetLocation(locID);
            locName = loc.LocName;
            return locName;
        }

        internal string GetLocationName(Position pos)
        {
            string locName = "unknown";
            int locID = Game.map.GetMapInfo(MapLayer.LocID, pos.PosX, pos.PosY);
            Location loc = Game.network.GetLocation(locID);
            locName = loc.LocName;
            return locName;
        }

        /// <summary>
        /// Get location coords in a formatted string
        /// </summary>
        /// <param name="locID"></param>
        /// <returns>returns '(loc 20:4)' format string</returns>
        public string ShowLocationCoords(int locID)
        {
            Location loc = Game.network.GetLocation(locID);
            string coords = string.Format("(loc {0}:{1})", loc.GetPosX(), loc.GetPosY());
            return coords;
        }



        /// <summary>
        /// click on a location to get info
        /// </summary>
        /// <param name="pos"></param>
        internal List<Snippet> ShowLocationRL(int locID, int mouseX, int mouseY)
        {
            List<Snippet> locList = new List<Snippet>();
            //Location display
            if (locID > 0)
            {
                string description = "House";
                RLColor color = RLColor.Cyan;
                bool houseCapital = false;
                Location loc = Game.network.GetLocation(locID);
                House house = GetHouse(loc.RefID);
                //if a House Capital show in Yellow
                if(Game.map.GetMapInfo(MapLayer.Capitals, loc.GetPosX(), loc.GetPosY()) > 0 )
                { color = RLColor.Yellow; houseCapital = true; }
                //ignore the capital and special locations for the moment until they are included in dictAllHouses
                if (house != null)
                {
                    int eventCount = house.GetNumFollowerEvents();
                    if (loc.HouseID != 99)
                    {
                        int resources = house.Resources;
                       //normal houses - major / minor / capital 
                        locList.Add(new Snippet(string.Format("House {0} of {1}, Lid {2}", house.Name, loc.LocName, loc.LocationID), color, RLColor.Black));
                        locList.Add(new Snippet(string.Format("Motto \"{0}\"", house.Motto)));
                        locList.Add(new Snippet(string.Format("Banner \"{0}\"", house.Banner)));
                        locList.Add(new Snippet(string.Format("Seated at {0} {1}", house.LocName, ShowLocationCoords(locID))));
                        RLColor loyaltyColor = Color._goodTrait;
                        if (house.Loyalty_Current == KingLoyalty.New_King) { loyaltyColor = Color._badTrait; }
                        locList.Add(new Snippet(string.Format("Loyal to the {0}", house.Loyalty_Current), loyaltyColor, RLColor.Black));
                        locList.Add(new Snippet(string.Format("Strength of Castle Walls ({0}) ", (CastleDefences)house.CastleWalls), false));
                        locList.Add(new Snippet(string.Format("{0}", GetStars((int)house.CastleWalls)), RLColor.LightRed, RLColor.Black));
                        locList.Add(new Snippet(string.Format("House Resources ({0}) ", (ResourceLevel)resources), false));
                        locList.Add(new Snippet(string.Format("{0}", GetStars((int)resources)), RLColor.LightRed, RLColor.Black));
                        if (eventCount > 0)
                        { locList.Add(new Snippet(string.Format("Archetype \"{0}\" with {1} events", Game.director.GetArchetypeName(house.ArcID), eventCount),
                            RLColor.LightGray, RLColor.Black)); }
                    }
                    else
                    {
                        //special Inn
                        locList.Add(new Snippet(string.Format("{0} Inn, LocID {1}, RefID {2}", house.Name, loc.LocationID, loc.RefID), color, RLColor.Black));
                        locList.Add(new Snippet(string.Format("Motto \"{0}\"", house.Motto)));
                        locList.Add(new Snippet(string.Format("Signage \"{0}\"", house.Banner)));
                        locList.Add(new Snippet(string.Format("Found at {0}", ShowLocationCoords(locID))));
                        if (eventCount > 0)
                        { locList.Add(new Snippet(string.Format("Archetype \"{0}\" with {1} events", Game.director.GetArchetypeName(house.ArcID), eventCount),
                            RLColor.LightGray, RLColor.Black)); }
                    }
                }
                //correct location description
                if (loc.HouseID == 99)
                { description = "A homely Inn"; }
                else if (loc.LocationID == 1)
                { description = loc.LocName + ": the Home of the King"; }
                else if (Game.map.GetMapInfo(MapLayer.Capitals, loc.GetPosX(), loc.GetPosY()) == 0)
                { description = "BannerLord of House"; }
                //bannerlord details if applicable
                if (houseCapital == false)
                {
                    string locDetails = string.Format("{0} {1}", description, GetMajorHouseName(loc.HouseID));
                    locList.Add(new Snippet(locDetails));
                }
                
                if (loc.IsCapital() == true)
                {
                    
                    locList.Add(new Snippet("KINGDOM CAPITAL", RLColor.Yellow, RLColor.Black));
                    int capitalWalls = Game.history.CapitalWalls;
                    int capitalResources = Game.history.CapitalTreasury;
                    locList.Add(new Snippet(string.Format("Strength of Castle Walls ({0}) ", (CastleDefences)capitalWalls), false));
                    locList.Add(new Snippet(string.Format("{0}", GetStars(capitalWalls)), RLColor.LightRed, RLColor.Black));
                    locList.Add(new Snippet(string.Format("House Resources ({0}) ", (ResourceLevel)capitalResources), false));
                    locList.Add(new Snippet(string.Format("{0}", GetStars((int)capitalResources)), RLColor.LightRed, RLColor.Black));
                }
                if (loc.Connector == true)
                { locList.Add(new Snippet("CONNECTOR", RLColor.Red, RLColor.Black)); }

                //characters at location
                List<int> charList = loc.GetActorList();
                charList.Sort();
                if (charList.Count > 0)
                {
                    RLColor textColor = RLColor.White;
                    int row = 3;
                    locList.Add(new Snippet(string.Format("Characters at {0}", loc.LocName), RLColor.Brown, RLColor.Black));
                    string actorDetails;
                    string actorType;
                    foreach (int charID in charList)
                    {
                        row++;
                        if (dictAllActors.ContainsKey(charID))
                        {
                            textColor = RLColor.White;
                            //Actor person = new Actor();
                            Actor person = dictAllActors[charID];
                            //advisors can be one of three different categories
                            if (person is Advisor) { actorType = GetAdvisorType((Advisor)person); }
                            else { actorType = Convert.ToString(person.Type); }
                            if ((int)person.Office > 0)
                            { actorType = Convert.ToString(person.Office); }
                            actorDetails = string.Format("Aid {0} {1} {2}, age {3}", person.ActID, actorType, person.Name, person.Age);
                            //player controlled (change color of text)?
                            if (person is Active)
                            {
                                if (person is Player)
                                { textColor = Color._player; }
                                else
                                { textColor = Color._active; }
                            }
                        }
                        else
                        {   actorDetails = string.Format("unknown ID " + Convert.ToString(charID)); }
                        locList.Add(new Snippet(actorDetails, textColor, RLColor.Black));
                    }
                }
            }
            else if (locID == 0)
            {
                int geoID = Game.map.GetMapInfo(MapLayer.GeoID, mouseX, mouseY, true);
                int numEvents;
                //geo sea zone or terrain cluster present?
                if (geoID > 0)
                {
                    GeoCluster cluster = GetGeoCluster(geoID);
                    if (cluster != null)
                    {
                        locList.Add(new Snippet(string.Format("{0}, geoID {1}", cluster.Name, cluster.GeoID), RLColor.Yellow, RLColor.Black));
                        locList.Add(new Snippet(cluster.Description));
                        locList.Add(new Snippet(string.Format("Size {0}, Terrain {1}, Type {2}", cluster.Size, cluster.Terrain, cluster.Type)));
                        numEvents = cluster.GetNumFollowerEvents();
                        if (numEvents > 0)
                        { locList.Add(new Snippet(string.Format("Archetype \"{0}\" with {1} Events", Game.director.GetArchetypeName(cluster.Archetype), numEvents))); }
                    }
                    else
                    { locList.Add(new Snippet(string.Format("ERROR: GeoCluster couldn't be found for geoID {0}", geoID), RLColor.Red, RLColor.Black)); }
                }
                //nothing there apart from plains
                else
                { locList.Add(new Snippet("ERROR: There is no Location present here", RLColor.Red, RLColor.Black)); }
                
            }
            else
            { locList.Add(new Snippet("ERROR: Please click on the map", RLColor.Red, RLColor.Black)); }
            return locList;
        }

        /// <summary>
        /// Display Major House data to main infoConsole (input either houseID or refID, will check houseID first)
        /// </summary>
        /// <param name="houseID"></param>
        /// <param name="refID"></param>
        /// <returns></returns>
        internal List<Snippet> ShowHouseRL(int houseID, int refID = 0)
        {
            MajorHouse majorHouse = null;
            //check input type
            if (houseID > 0)
            { majorHouse = GetMajorHouse(houseID); }
            else if (refID > 0)
            { House house = GetHouse(refID); majorHouse = house as MajorHouse; }
            else
            { Game.SetError(new Error(36, "Invalid input data")); return null; }
            List<Snippet> houseList = new List<Snippet>();
            if (majorHouse != null)
            {
                List<int> listLordLocations = majorHouse.GetBannerLordLocations();
                //details
                houseList.Add(new Snippet("House " + majorHouse.Name, RLColor.Yellow, RLColor.Black));
                string motto = string.Format("Motto \"{0}\"", majorHouse.Motto);
                houseList.Add(new Snippet(motto));
                string banner = string.Format("Banner \"{0}\"", majorHouse.Banner);
                houseList.Add(new Snippet(banner));
                string seat = string.Format("Seated at {0} {1}", majorHouse.LocName, ShowLocationCoords(majorHouse.LocID));
                houseList.Add(new Snippet(seat));
                string loyalty = string.Format("Loyal to the {0} (originally: {1})", majorHouse.Loyalty_Current, majorHouse.Loyalty_AtStart);
                houseList.Add(new Snippet(loyalty));
                int bannerTotal = listLordLocations.Count * Game.constant.GetValue(Global.MEN_AT_ARMS) / 2;
                int armyTotal = bannerTotal + majorHouse.MenAtArms;
                string army = string.Format("Can call upon {0:N0} Men At Arms in Total ({1:N0} from Lord, {2:N0} from Bannerlords)", armyTotal, majorHouse.MenAtArms, bannerTotal);
                houseList.Add(new Snippet(army));
                houseList.Add(new Snippet(string.Format("Strength of Castle Walls ({0}) ", (CastleDefences)majorHouse.CastleWalls), false));
                houseList.Add(new Snippet(string.Format("{0}", GetStars(majorHouse.CastleWalls)), RLColor.LightRed, RLColor.Black));
                houseList.Add(new Snippet(string.Format("House Resources ({0}) ", (ResourceLevel)majorHouse.Resources), false));
                houseList.Add(new Snippet(string.Format("{0}", GetStars((int)majorHouse.Resources)), RLColor.LightRed, RLColor.Black));
                //bannerlords
                if (listLordLocations.Count > 0)
                {
                    houseList.Add(new Snippet("BannerLords", RLColor.Yellow, RLColor.Black));
                    string bannerLord;
                    foreach (int locID in listLordLocations)
                    {
                        Location loc = Game.network.GetLocation(locID);
                        refID = Game.map.GetMapInfo(MapLayer.RefID, loc.GetPosX(), loc.GetPosY());
                        House house = GetHouse(refID);
                        bannerLord = string.Format("House {0} at {1} {2}", house.Name, GetLocationName(locID), ShowLocationCoords(locID));
                        houseList.Add(new Snippet(bannerLord));
                    }
                }
                //family - get list of all actorID's in family
                houseList.Add(new Snippet("Family", RLColor.Brown, RLColor.Black));
                List<int> listOfFamily = new List<int>();
                refID = majorHouse.RefID;
                IEnumerable<int> familyMembers =
                    from person in dictPassiveActors
                    where person.Value.RefID == refID && person.Value is Noble
                    orderby person.Value.ActID
                    select person.Value.ActID;
                listOfFamily = familyMembers.ToList();
                //loop list and display each actor appropriately (dead, or missing, in Lt.Gray)
                string personText;
                string actorType;
                foreach(int actorID in listOfFamily)
                {
                    Passive person = GetPassiveActor(actorID);
                    if ((int)person.Office > 0) { actorType = Convert.ToString(person.Office); }
                    else { actorType = Convert.ToString(person.Type); }
                    personText = string.Format("Aid {0} {1} {2}, age {3}, ", person.ActID, actorType, person.Name, person.Age);
                    //valid actor?
                    if (person.Name != null)
                    {
                        RLColor locColor = RLColor.White;
                        string locString = "?";
                        //location descriptor
                        switch (person.Status)
                        {
                            case ActorStatus.AtLocation:
                                locString = string.Format("at {0} {1}", GetLocationName(person.LocID), ShowLocationCoords(person.LocID));
                                break;
                            case ActorStatus.Travelling:
                                Position pos = person.GetActorPosition();
                                locString = string.Format("travelling to {0} {1}",  GetLocationName(person.LocID), ShowLocationCoords(person.LocID));
                                break;
                            case ActorStatus.Gone:
                                locString = string.Format("Passed away ({0}) in {1}", person.ReasonGone, person.Gone);
                                locColor = RLColor.LightGray;
                                break;
                        }
                        houseList.Add(new Snippet(personText + locString, locColor, RLColor.Black));
                    }
                }
                //House Retainers - get list of all actorID's
                houseList.Add(new Snippet("Retainers", RLColor.Brown, RLColor.Black));
                List<int> listOfRetainers = new List<int>();
                refID = majorHouse.RefID;
                IEnumerable<int> Retainers =
                    from person in dictPassiveActors
                    where person.Value.RefID == refID && !(person.Value is Noble)
                    orderby person.Value.ActID
                    select person.Value.ActID;
                listOfRetainers = Retainers.ToList();
                // loop list and display each actor appropriately (dead in Lt.Gray)
                string type;
                foreach (int actorID in listOfRetainers)
                {
                    Passive person = GetPassiveActor(actorID);
                    //advisors can be one of three different categories
                    if (person is Advisor) { type = GetAdvisorType((Advisor)person); }
                    else { type = Convert.ToString(person.Type); }
                    personText = string.Format("Aid {0} {1} {2}, age {3}, ", person.ActID, type, person.Name, person.Age);
                    //valid actor?
                    if (person.Name != null)
                    {
                        RLColor locColor = RLColor.White;
                        string locString = "?";
                        //location descriptor
                        switch (person.Status)
                        {
                            case ActorStatus.AtLocation:
                                locString = string.Format("at {0} {1}", GetLocationName(person.LocID), ShowLocationCoords(person.LocID));
                                break;
                            case ActorStatus.Travelling:
                                Position pos = person.GetActorPosition();
                                locString = string.Format("travelling to {0} {1}", GetLocationName(person.LocID), ShowLocationCoords(person.LocID));
                                break;
                            case ActorStatus.Gone:
                                locString = string.Format("passed away ({0}) in {1}", person.ReasonGone, person.Gone);
                                locColor = RLColor.LightGray;
                                break;
                        }
                        houseList.Add(new Snippet(personText + locString, locColor, RLColor.Black));
                    }
                }
                //Relationships
                List<Relation> tempListRelations = majorHouse.GetRelations();
                if (tempListRelations != null && tempListRelations.Count > 0)
                {
                    houseList.Add(new Snippet("Relations with Other Houses", RLColor.Brown, RLColor.Black));
                    //display relations in chronological order
                    IEnumerable<string> relRecords =
                        from relation in tempListRelations
                        orderby relation.Year
                        select string.Format("{0}  {1} {2}, \"{3}\", Rel {4}{5}", relation.Year, relation.RefID >= 100 ? "(Minor)" : "(Major)",
                        GetHouseName(relation.RefID), relation.Text, relation.Change > 0 ? "+" : "", relation.Change);
                    List<string> tempRelRecords = relRecords.ToList();
                    //add snippets
                    foreach (string relText in tempRelRecords)
                    { houseList.Add(new Snippet(relText)); }
                }
                //house history
                List < string > houseHistory = GetHouseRecords(majorHouse.RefID);
                if (houseHistory.Count > 0)
                {
                    houseList.Add(new Snippet("House History", RLColor.Brown, RLColor.Black));
                    foreach(string text in houseHistory)
                    { houseList.Add(new Snippet(text)); }
                }
            }
            return houseList;
        }


        /// <summary>
        /// display Royal Court, retainers and others at Kingskeep
        /// </summary>
        /// <returns></returns>
        public List<Snippet> ShowCapitalRL()
        {
            List<Snippet> capitalList = new List<Snippet>();
            capitalList.Add(new Snippet(string.Format("Kingskeep, Kingdom Capital {0}", ShowLocationCoords(1)), RLColor.Yellow, RLColor.Black));
            int capitalWalls = Game.history.CapitalWalls;
            int capitalResources = Game.history.CapitalTreasury;
            capitalList.Add(new Snippet(string.Format("Strength of Castle Walls ({0}) ", (CastleDefences)capitalWalls), false));
            capitalList.Add(new Snippet(string.Format("{0}", GetStars(capitalWalls)), RLColor.LightRed, RLColor.Black));
            //placeholder
            capitalList.Add(new Snippet(string.Format("Kingdom Treasury Resources ({0}) ", (ResourceLevel)capitalResources), false));
            capitalList.Add(new Snippet(string.Format("{0}", GetStars(capitalResources)), RLColor.LightRed, RLColor.Black));
            //ROYAL FAMILY
            capitalList.Add(new Snippet("Royal Family", RLColor.Brown, RLColor.Black));
            int royalRefID = Game.lore.RoyalRefIDCurrent;
            //query royal family members at capital
            List<Passive> royalFamily = new List<Passive>();
            IEnumerable<Passive> listOfNobles =
                from actor in dictPassiveActors
                where actor.Value.LocID == 1 && actor.Value.RefID == royalRefID && actor.Value is Noble && actor.Value.Status == ActorStatus.AtLocation
                orderby actor.Value.ActID
                select actor.Value;
            royalFamily = listOfNobles.ToList();
            //add to list
            string actorOffice;
            foreach(Passive actor in royalFamily)
            {
                Noble noble = actor as Noble;
                if (noble.Office > ActorOffice.None)
                { actorOffice = Convert.ToString(noble.Office); }
                else { actorOffice = Convert.ToString(noble.Type); }
                capitalList.Add(new Snippet(string.Format("Aid {0} {1} {2}, age {3} at Kingskeep {4}", noble.ActID, actorOffice, noble.Name, noble.Age, ShowLocationCoords(1))));
            }
            //ROYAL COURT
            capitalList.Add(new Snippet("Royal Court", RLColor.Brown, RLColor.Black));
            foreach (KeyValuePair<int, Passive> kvp in dictRoyalCourt)
            {
                if (kvp.Value is Advisor)
                {
                    Advisor advisor = kvp.Value as Advisor;
                    actorOffice = Convert.ToString(advisor.advisorRoyal);
                }
                else { actorOffice = Convert.ToString(kvp.Value.Office); }
                capitalList.Add(new Snippet(string.Format("Aid {0} {1} {2}, age {3} at Kingskeep {4}", kvp.Value.ActID, actorOffice, kvp.Value.Name, kvp.Value.Age, ShowLocationCoords(1))));
            }
            //OTHERS
            List<Actor> assortedActors = new List<Actor>();
            IEnumerable<Actor> listOfActors =
                from actor in dictActiveActors
                where actor.Value.LocID == 1
                orderby actor.Value.ActID
                select actor.Value;
            assortedActors = listOfActors.ToList();
            //add to list
            if (assortedActors.Count > 0)
            {
                capitalList.Add(new Snippet("Others", RLColor.Brown, RLColor.Black));
                RLColor textColor;
                foreach (Actor actor in assortedActors)
                {
                    if (actor.Office > ActorOffice.None)
                    { actorOffice = Convert.ToString(actor.Office); }
                    else { actorOffice = Convert.ToString(actor.Type); }
                    //highlight active players
                    textColor = RLColor.White;
                    if (actor is Active)
                    {
                        if (actor is Player)
                        { textColor = Color._player; }
                        else
                        { textColor = Color._active; }
                    }
                    capitalList.Add(new Snippet(string.Format("Aid {0} {1} {2}, age {3} at Kingskeep {4}", actor.ActID, actorOffice, actor.Name, actor.Age, ShowLocationCoords(1)),
                        textColor, RLColor.Black));
                }
            }
            //Relationships (identical for the King's house)
            MajorHouse majorHouse = (MajorHouse)GetHouse(Game.lore.RoyalRefIDNew);
            if (majorHouse != null)
            {
                List<Relation> tempListRelations = majorHouse.GetRelations();
                if (tempListRelations != null && tempListRelations.Count > 0)
                {
                    capitalList.Add(new Snippet("Relations with Other Houses", RLColor.Brown, RLColor.Black));
                    //display relations in chronological order
                    IEnumerable<string> relRecords =
                        from relation in tempListRelations
                        orderby relation.Year
                        select string.Format("{0}  {1} {2}, \"{3}\", Rel {4}{5}", relation.Year, relation.RefID >= 100 ? "(Minor)" : "(Major)",
                        GetHouseName(relation.RefID), relation.Text, relation.Change > 0 ? "+" : "", relation.Change);
                    List<string> tempRelRecords = relRecords.ToList();
                    //add snippets
                    foreach (string relText in tempRelRecords)
                    { capitalList.Add(new Snippet(relText)); }
                }
            }
            else { Game.SetError(new Error(136, "New King's House not found (null)")); }

            return capitalList;
        }

        /// <summary>
        /// Select a Player Character from the displayed list
        /// </summary>
        /// <returns>Character ID</returns>
        public int ChooseActor()
        {
            Console.WriteLine("Which Character do you want to move (Enter ID #)? ");
            int charID = Convert.ToInt32(Console.ReadLine());
            Active person = new Active();
            //check character exists
            if(dictActiveActors.ContainsKey(charID))
            {
                person = dictActiveActors[charID];
                if (person.Status != ActorStatus.AtLocation)
                { Console.WriteLine("That Character isn't at a Location and can't be selected"); charID = 0; }
            }
            else
            { Console.WriteLine("Character doesn't exist!"); charID = 0; }
            return charID;
        }

        /// <summary>
        /// return a Passive actor from dictPassiveActors
        /// </summary>
        /// <param name="actorID"></param>
        /// <returns></returns>
        internal Passive GetPassiveActor(int actorID)
        {
            Passive person = new Passive();
            if (dictPassiveActors.ContainsKey(actorID))
            { person = dictPassiveActors[actorID]; }
            return person;
        }

        internal Dictionary<int, Passive> GetAllPassiveActors()
        { return dictPassiveActors; }

        /// <summary>
        /// return an Active actor from dictActiveActors, otherwise null
        /// </summary>
        /// <param name="actorID"></param>
        /// <returns></returns>
        internal Active GetActiveActor(int actorID)
        {
            Active person = new Active();
            if (dictActiveActors.ContainsKey(actorID))
            { person = dictActiveActors[actorID]; }
            else { person = null; }
            return person;
        }

        /// <summary>
        /// returns any actor -> Passive or Active
        /// </summary>
        /// <param name="actorID"></param>
        /// <returns></returns>
        internal Actor GetAnyActor(int actorID)
        {
            Actor person = new Actor();
            if (dictAllActors.ContainsKey(actorID))
            { person = dictAllActors[actorID]; }
            else { person = null; }
            return person;
        }

        /// <summary>
        /// returns dictionary of Active Actors
        /// </summary>
        /// <returns></returns>
        internal Dictionary<int, Active> GetAllActiveActors()
        { return dictActiveActors; }
      
        /// <summary>
        /// returns string showing character name and status (at 'x' loc, travelling)
        /// </summary>
        /// <param name="actID"></param>
        /// <returns></returns>
        public Snippet GetActorStatusRL(int actID)
        {
            Actor person = new Actor();
            string charReturn = "Character doesn't exist!";
            //check character exists
            if (dictActiveActors.ContainsKey(actID))
            {
                person = dictActiveActors[actID];
                charReturn = person.Name;
                if (person.Status != ActorStatus.AtLocation)
                { charReturn += " isn't currently available"; }
                else
                {
                    Position pos = person.GetActorPosition();
                    charReturn += " is awaiting your orders at ";
                    charReturn += GetLocationName(person.LocID);
                    charReturn += string.Format(" (loc {0}:{1})", pos.PosX, pos.PosY);
                }
            }
            return new Snippet(charReturn);
        }

        /// <summary>
        /// returns true if Player at specified location and their status is 'AtLocation' (used by DrawMapRL)
        /// </summary>
        /// <param name="locID"></param>
        /// <returns></returns>
        public bool GetPlayerLocStatus(int locID)
        {
            //check player in dictionary
            if (dictActiveActors.ContainsKey(1))
            {
                Active player = dictActiveActors[1];
                if (player.Status == ActorStatus.AtLocation)
                {
                    if (player.LocID == locID)
                    { return true; }
                }
            }
            return false;
        }

        /// <summary>
        /// returns Revert # of days for specified active actor. A value of 0 indicates a status of Unknown (eg. 'Known' = false)
        /// </summary>
        /// <param name="actID"></param>
        /// <returns></returns>
        public int GetActiveActorKnownStatus(int actID)
        {
            //check active actor in dictionary
            if (dictActiveActors.ContainsKey(actID))
            {
                Active active = dictActiveActors[actID];
                if (active.Status != ActorStatus.Gone)
                { return active.Revert; }
            }
            else { Game.SetError(new Error(137, "Active Actor not found in dictActiveActors")); }
            return 0;
        }

        /// <summary>
        /// selects an active actor for movement orders if at a location and activated
        /// </summary>
        /// <param name="charID"></param>
        /// <returns></returns>
        internal Position GetActiveActorLocationByPos(int charID)
        {
            Position pos = new Position();
            //find in dictionary
            if (dictActiveActors.ContainsKey(charID))
            {
                Active person = dictActiveActors[charID];
                pos = person.GetActorPosition();
                //can't be selected if not activated
                if (person.Activated == false) { pos = null; }
            }
            else
            { pos = null; }
            return pos;
        }

        
        public int GetActiveActorLocByID(int actID)
        {
            int locID = 0;
            //find in dictionary
            if (dictActiveActors.ContainsKey(actID))
            {
                Active person = dictActiveActors[actID];
                locID = person.LocID;
            }
            return locID;
        }

        /// <summary>
        /// receives list of Houses from Network and places in releveant House Dictionaries for permanent use
        /// </summary>
        /// <param name="listOfHouses"></param>
        internal void InitialiseHouses()
        {
            Game.network.UpdateHouses(Game.history.GetGreatHouses());
            //great houses
            List<MajorHouse> listOfGreatHouses = Game.history.GetGreatHouses();
            foreach(MajorHouse house in listOfGreatHouses)
            { AddMajorHouse(house); }
            //populate sorted dictionary (descending) of house ID's by Power (# of BannerLords)
            SortMajorHouses();
            //minor houses
            List<House> listOfMinorHouses = Game.history.GetMinorHouses();
            foreach (House house in listOfMinorHouses)
            { dictAllHouses.Add(house.RefID, house); }
            //initialise Special Locations
            Game.history.InitialiseSpecialHouses();
            //update Map layer for RefID
            int locID = 0;
            int refID = 0;
            foreach (KeyValuePair<int, House> record in dictAllHouses)
            {
                locID = record.Value.LocID;
                refID = record.Value.RefID;
                Location loc = Game.network.GetLocation(locID);
                Game.map.SetMapInfo(MapLayer.RefID, loc.GetPosX(), loc.GetPosY(), refID);
            }
            //populate list of Bannerlord RefID's in Great Houses
            foreach (MajorHouse house in listOfGreatHouses)
            {
                List<int> bannerLords = house.GetBannerLordLocations();
                int minorRefID;
                if (bannerLords.Count > 0)
                {
                    foreach (int minorLocID in bannerLords)
                    {
                        Location loc = Game.network.GetLocation(minorLocID);
                        minorRefID = Game.map.GetMapInfo(MapLayer.RefID, loc.GetPosX(), loc.GetPosY());
                        house.AddBannerLord(minorRefID);
                    }
                }
            }
            //fill Great Houses with Lords and Ladies
            Console.WriteLine("--- Genetics");
            foreach (KeyValuePair<int, MajorHouse> kvp in dictMajorHouses)
            {
                //create Lord and Lady for house
                Location loc = Game.network.GetLocation(kvp.Value.LocID);
                Position pos = loc.GetPosition();
                Noble actorLord = (Noble)Game.history.CreateStartingHouseActor(kvp.Value.Name, ActorType.Lord, pos, kvp.Value.LocID, kvp.Value.RefID, kvp.Value.HouseID);
                Noble actorLady = (Noble)Game.history.CreateStartingHouseActor(kvp.Value.Name, ActorType.Lady, pos, kvp.Value.LocID, kvp.Value.RefID, kvp.Value.HouseID, 
                    ActorSex.Female, WifeStatus.First_Wife);
                //add Lord to House
                kvp.Value.LordID = actorLord.ActID;
                //create a knight, castellan and maester for each Major house
                Knight actorKnight = Game.history.CreateKnight(pos, kvp.Value.LocID, kvp.Value.RefID, kvp.Value.HouseID);
                Advisor actorCastellan = Game.history.CreateAdvisor(pos, kvp.Value.LocID, kvp.Value.RefID, kvp.Value.HouseID, ActorSex.Male, AdvisorNoble.Castellan);
                Advisor actorMaester = Game.history.CreateAdvisor(pos, kvp.Value.LocID, kvp.Value.RefID, kvp.Value.HouseID, ActorSex.Male, AdvisorNoble.Maester);
                Advisor actorSepton = Game.history.CreateAdvisor(pos, kvp.Value.LocID, kvp.Value.RefID, kvp.Value.HouseID, ActorSex.Male, AdvisorNoble.Septon);
                //add to dictionaries of actors
                SetPassiveActor(actorLord);
                SetPassiveActor(actorLady);
                SetPassiveActor(actorKnight);
                SetPassiveActor(actorCastellan);
                SetPassiveActor(actorMaester);
                SetPassiveActor(actorSepton);
                //create family
                Game.history.CreateFamily(actorLord, actorLady);
                //check if lady died in childbirth
               /* if (actorLady.Status == ActorStatus.Dead)
                {
                    int yearWifeDied = actorLady.Died;
                    //40% chance of remarrying
                    if (rnd.Next(100) < 40)
                    {
                        //new wife
                        Passive actor2ndWife = Game.history.CreatePassiveActor(kvp.Value.Name, ActorTitle.Lady, pos, kvp.Value.LocID, kvp.Value.RefID, kvp.Value.HouseID, 
                            ActorSex.Female, WifeStatus.Second_Wife);
                        //add to dictionaries of actors
                        dictPassiveActors.Add(actor2ndWife.ActID, actor2ndWife);
                        dictAllActors.Add(actor2ndWife.ActID, actor2ndWife);
                        //location born (different for lady)
                        House wife2ndHouse = GetHouse(actor2ndWife.BornRefID);
                        Location loc2ndWife = Game.network.GetLocation(wife2ndHouse.LocID);
                        descriptor = string.Format("{0} (nee {1}, Aid {2}) born at {3}", actor2ndWife.Name, actor2ndWife.MaidenName, actor2ndWife.ActID, loc2ndWife.LocName);
                        Record record2ndWife = new Record(descriptor, actor2ndWife.ActID, loc2ndWife.LocationID, actor2ndWife.BornRefID, actor2ndWife.Born, HistEvent.Born);
                        //create records of being born
                        SetRecord(record2ndWife);
                        //store actor in location
                        loc.AddActor(actor2ndWife.ActID);
                        //create family
                        Game.history.CreatePassiveFamily(actorLord, actor2ndWife);
                    }
                }*/
            }
            //hand out bastards and adopted sons to lords with no heirs
            CheckGreatLords();
            //fill minor houses with BannerLords
            foreach(KeyValuePair<int, House> kvp in dictAllHouses)
            {
                //minor houses only
                if (kvp.Value is MinorHouse)
                {
                    //create BannerLord for house
                    Location loc = Game.network.GetLocation(kvp.Value.LocID);
                    Position pos = loc.GetPosition();
                    BannerLord bannerLord = (BannerLord)Game.history.CreateStartingHouseActor(kvp.Value.Name, ActorType.BannerLord, pos, kvp.Value.LocID, kvp.Value.RefID, kvp.Value.HouseID);
                    //add to dictionaries of actors
                    dictPassiveActors.Add(bannerLord.ActID, bannerLord);
                    dictAllActors.Add(bannerLord.ActID, bannerLord);
                    //add Lord to house
                    kvp.Value.LordID = bannerLord.ActID;
                }
            }
        }

        /// <summary>
        /// creates dictHousePower of strongest to weakest houses
        /// </summary>
        internal void SortMajorHouses()
        {
            dictHousePower.Clear();
            foreach (KeyValuePair<int, int> kvp in dictMajorHouseID.OrderByDescending(key => key.Value))
            { dictHousePower.Add(kvp.Key, kvp.Value); }
        }

        /// <summary>
        /// adds a Major House to all relevant dictionaries
        /// </summary>
        /// <param name="house"></param>
        internal void AddMajorHouse(MajorHouse house)
        {
            try
            {
                dictMajorHouses.Add(house.HouseID, house);
                dictAllHouses.Add(house.RefID, house);
                dictMajorHouseID.Add(house.HouseID, house.GetNumBannerLords());
            }
            catch (Exception e)
            { Game.SetError(new Error(34, e.Message)); }
        }

        /// <summary>
        /// Add non-Major house to the only relevant dictionary
        /// </summary>
        /// <param name="house"></param>
        internal void AddOtherHouse(House house)
        { dictAllHouses.Add(house.RefID, house); }

        /// <summary>
        /// Add a possession to the dictionary, return true if successful
        /// </summary>
        /// <param name="possID"></param>
        /// <param name="possObject"></param>
        /// <returns></returns>
        public bool AddPossession(int possID, Possession possObject)
        {
            try
            { dictPossessions.Add(possID, possObject); return true; }
            catch (ArgumentNullException)
            { Game.SetError(new Error(123, "Invalid Possession Object (null), possID")); }
            catch (ArgumentException)
            { Game.SetError(new Error(123, string.Format("Invalid possessionID (duplicate ID), possID {0}", possID))); }
            return false;
        }

        /// <summary>
        /// find entry with same RefID in dictAllHouses and removes it if present (used by lore.cs CreateNewMajorHouse)
        /// </summary>
        /// <param name="refID"></param>
        internal void RemoveMinorHouse(int refID)
        {
            if (!dictAllHouses.Remove(refID))
            { Game.SetError(new Error(35, "House not found")); }
        }

        /// <summary>
        /// find and remove Great House from all relevant dictionaries
        /// </summary>
        /// <param name="refID"></param>
        internal void RemoveMajorHouse(House house)
        {
            //if (!dictAllHouses.Remove(house.RefID)) -> leave this as it doesn't affect major house calculations and retains house records
            //{ Game.SetError(new Error(35, "House not found")); }
            if (!dictMajorHouses.Remove(house.HouseID))
            { Game.SetError(new Error(35, "House not found")); }
            if (!dictMajorHouseID.Remove(house.HouseID))
            { Game.SetError(new Error(35, "House not found")); }
        }

        /// <summary>
        /// checks GreatLords for having no sons at Game Start
        /// </summary>
        private void CheckGreatLords()
        {
            //loop all passive actors
            bool foundSon;
            int wifeID = 0;
            int yearUpper; //upper and lower bounds for determining what year child is born
            int yearLower;
            int yearBorn;
            List<int> listOfLords = new List<int>(); //ActID of lords who are in need of a son
            List<int> listOfLadies = new List<int>(); //ActID of ladies who are in need of a son (lord and lady have identical indexes)
            foreach (KeyValuePair<int, Passive> kvp in dictPassiveActors)
            {
                foundSon = false;
                //lord?
                if (kvp.Value.Type == ActorType.Lord && kvp.Value.Status != ActorStatus.Gone)
                {
                    //Loop family looking for a son
                    Noble noble = kvp.Value as Noble;
                    SortedDictionary<int, ActorRelation> tempDictFamily = noble.GetFamily();
                    foreach (KeyValuePair<int, ActorRelation> family_kvp in tempDictFamily)
                    {
                        if (family_kvp.Value == ActorRelation.Son)
                        { foundSon = true;}
                        else if(family_kvp.Value == ActorRelation.Wife)
                        { wifeID = family_kvp.Key; }
                    }
                    //if no son provide one
                    if (foundSon == false)
                    {
                        listOfLords.Add(kvp.Value.ActID);
                        listOfLadies.Add(wifeID);
                    }
                }
            }
            //who needs a son?
            if (listOfLords.Count > 0)
            {
                for (int i = 0; i < listOfLords.Count; i++)
                {
                    //50/50 bastard or adopted
                    ActorParents parents = ActorParents.Bastard;
                    if (rnd.Next(100) < 50)
                    { parents = ActorParents.Adopted; }
                    //create a child
                    Noble Lord = (Noble)GetPassiveActor(listOfLords[i]);
                    Noble Lady = (Noble)GetPassiveActor(listOfLadies[i]);
                    //get year
                    yearUpper = Game.gameRevolt;
                    if (Lady.Status == ActorStatus.Gone)
                    { yearUpper = Lady.Gone; }
                    yearLower = Lady.Married;
                    yearBorn = rnd.Next(yearLower, yearUpper);
                    Game.history.CreateChild(Lord, Lady, yearBorn, ActorSex.Male, parents);
                }
            }
        }


        /// <summary>
        /// populates dictionary of GeoLocations
        /// </summary>
        private void InitialiseGeoClusters()
        {
            List<GeoCluster> tempList = Game.history.GetGeoClusters();
            foreach (GeoCluster cluster in tempList)
            { dictGeoClusters.Add(cluster.GeoID, cluster); }
        }

        /// <summary>
        /// populates dictionary of Traits
        /// </summary>
        private void InitialiseTraits()
        {
            List<Skill> tempList = Game.history.GetTraits();
            foreach (Skill trait in tempList)
            { dictTraits.Add(trait.SkillID, trait); }
        }

        /// <summary>
        /// populates Possession dictionary with Secrets
        /// </summary>
        private void InitialiseSecrets()
        {
            List<Secret> tempList = Game.history.GetSecrets();
            foreach (Secret secret in tempList)
            { dictPossessions.Add(secret.PossID, secret); }
        }

        /// <summary>
        /// places a message in info panel detailing all relevant data for a single generation
        /// </summary>
        public void ShowGeneratorStatsRL()
        {
            List<Snippet> listStats = new List<Snippet>();
            //calcs
            int numLocs = Game.network.GetNumLocations();
            int numGreatHouses = dictMajorHouses.Count;
            int numSpecialLocs = Game.network.GetNumSpecialLocations();
            int numBannerLords = dictAllHouses.Count - numGreatHouses - 1 - numSpecialLocs;
            int numActors = dictAllActors.Count;
            int numChildren = numActors - (numGreatHouses * 2) - numBannerLords;
            //int numSecrets = dictSecrets.Count;
            int numSecrets = CountPossessions(PossessionType.Secret);
            //checksum
            if (numLocs != numGreatHouses + numSpecialLocs + numBannerLords + 1)
            { Game.SetError(new Error(25, "Locations don't tally")); }
            int numErrors = Game.GetErrorCount();
            //data
            listStats.Add(new Snippet("--- Generation Statistics", RLColor.Yellow, RLColor.Black));
            listStats.Add(new Snippet(string.Format("{0} Locations", numLocs)));
            listStats.Add(new Snippet(string.Format("{0} Great Houses", numGreatHouses)));
            listStats.Add(new Snippet(string.Format("{0} BannerLords", numBannerLords)));
            listStats.Add(new Snippet(string.Format("{0} Special Locations", numSpecialLocs)));
            listStats.Add(new Snippet("1 Capital"));
            listStats.Add(new Snippet(string.Format("{0} Actors ({1} Children)", numActors, numChildren)));
            if (numSecrets > 0) { listStats.Add(new Snippet(string.Format("{0} Secrets", numSecrets))); }
            if (numErrors > 0) { listStats.Add(new Snippet(string.Format("{0} Errors", numErrors), RLColor.LightRed, RLColor.Black)); }
            //list of all Greathouses by power
            listStats.Add(new Snippet("Great Houses", RLColor.Yellow, RLColor.Black));
            string housePower;
            foreach (KeyValuePair<int, int> kvp in dictHousePower)
            {
                MajorHouse house = GetMajorHouse(kvp.Key);
                housePower = string.Format("Hid {0} House {1} has {2} BannerLords  {3}, Loyal to the {4} (orig {5})", house.HouseID, house.Name, house.GetNumBannerLords(), 
                    ShowLocationCoords(house.LocID), house.Loyalty_Current, house.Loyalty_AtStart);
                listStats.Add(new Snippet(housePower));
            }

            //if start of game also show Errors
            if (Game.gameTurn == 0)
            {
                List<Snippet> tempList = Game.ShowErrorsRL();
                if (tempList.Count > 0)
                {
                    listStats.Add(new Snippet(""));
                    listStats.Add(new Snippet(""));
                    listStats.Add(new Snippet(""));
                    listStats.Add(new Snippet("--- Errors ALL", RLColor.LightRed, RLColor.Black));
                    listStats.AddRange(tempList);
                }
            }
            //display data
            Game.infoChannel.SetInfoList(listStats, ConsoleDisplay.Multi);
        }

        /// <summary>
        /// Show game state as well as the date as the default input display (green if Good has increased, red if Bad)
        /// </summary>
        public void ShowGameStateRL()
        {
            int data, good, bad, change;
            List<Snippet> listStats = new List<Snippet>();
            RLColor increase = Color._increase;
            RLColor decrease = Color._decrease;
            RLColor foreground;
            //Date
            listStats.Add(new Snippet(Game.utility.ShowDate(), RLColor.Yellow, RLColor.Black));
            //Invisibility
            /*data = Game.director.CheckGameState(DataPoint.Invisibility);
            good = Game.director.GetGameState(DataPoint.Invisibility, DataState.Good);
            bad = Game.director.GetGameState(DataPoint.Invisibility, DataState.Bad);
            change = Game.director.CheckGameStateChange(DataPoint.Invisibility);
            foreground = RLColor.White;
            if (change > 0 ) { foreground = increase; }
            else if (change < 0) { foreground = decrease; }
            listStats.Add(new Snippet(string.Format("{0, -18} {1} %  (good {2} bad {3})", "Invisibility (You)", data, good, bad), foreground, RLColor.Black));*/
            //justice
            data = Game.director.CheckGameState(DataPoint.Justice);
            good = Game.director.GetGameState(DataPoint.Justice, DataState.Good);
            bad = Game.director.GetGameState(DataPoint.Justice, DataState.Bad);
            change = Game.director.CheckGameStateChange(DataPoint.Justice);
            foreground = RLColor.White;
            if (change > 0) { foreground = increase; }
            else if (change < 0) { foreground = decrease; }
            listStats.Add(new Snippet(string.Format("{0, -18} {1} %  (good {2} bad {3})", "Justice (Cause)", data, good, bad), foreground, RLColor.Black));
            //legend_usurper
            data = Game.director.CheckGameState(DataPoint.Legend_Usurper);
            good = Game.director.GetGameState(DataPoint.Legend_Usurper, DataState.Good);
            bad = Game.director.GetGameState(DataPoint.Legend_Usurper, DataState.Bad);
            change = Game.director.CheckGameStateChange(DataPoint.Legend_Usurper);
            foreground = RLColor.White;
            if (change > 0) { foreground = increase; }
            else if (change < 0) { foreground = decrease; }
            listStats.Add(new Snippet(string.Format("{0, -18} {1} %  (good {2} bad {3})", "Legend (You)", data, good, bad), foreground, RLColor.Black));
            //legend_king
            data = Game.director.CheckGameState(DataPoint.Legend_King);
            good = Game.director.GetGameState(DataPoint.Legend_King, DataState.Good);
            bad = Game.director.GetGameState(DataPoint.Legend_King, DataState.Bad);
            change = Game.director.CheckGameStateChange(DataPoint.Legend_King);
            foreground = RLColor.White;
            if (change > 0) { foreground = increase; }
            else if (change < 0) { foreground = decrease; }
            listStats.Add(new Snippet(string.Format("{0, -18} {1} %  (good {2} bad {3})", "Legend (King)", data, good, bad), foreground, RLColor.Black));
            //honour_usurper
            data = Game.director.CheckGameState(DataPoint.Honour_Usurper);
            good = Game.director.GetGameState(DataPoint.Honour_Usurper, DataState.Good);
            bad = Game.director.GetGameState(DataPoint.Honour_Usurper, DataState.Bad);
            change = Game.director.CheckGameStateChange(DataPoint.Honour_Usurper);
            foreground = RLColor.White;
            if (change > 0) { foreground = increase; }
            else if (change < 0) { foreground = decrease; }
            listStats.Add(new Snippet(string.Format("{0, -18} {1} %  (good {2} bad {3})", "Honour (You)", data, good, bad), foreground, RLColor.Black));
            //honour_king
            data = Game.director.CheckGameState(DataPoint.Honour_King);
            good = Game.director.GetGameState(DataPoint.Honour_King, DataState.Good);
            bad = Game.director.GetGameState(DataPoint.Honour_King, DataState.Bad);
            change = Game.director.CheckGameStateChange(DataPoint.Honour_King);
            foreground = RLColor.White;
            if (change > 0) { foreground = increase; }
            else if (change < 0) { foreground = decrease; }
            listStats.Add(new Snippet(string.Format("{0, -18} {1} %  (good {2} bad {3})", "Honour (King)", data, good, bad), foreground, RLColor.Black));

            //show Visibility status
            int knownStatus = GetActiveActorKnownStatus(1);
            if (knownStatus > 0)
            { listStats.Add(new Snippet(string.Format("Known, reverts in {0} days", knownStatus) , Color._badTrait, RLColor.Black)); }
            else { listStats.Add(new Snippet("Unknown (the Inquisitors don't know your location)", Color._goodTrait, RLColor.Black)); }

            //display data
            Game.infoChannel.SetInfoList(listStats, ConsoleDisplay.Input);
        }

        /// <summary>
        /// Quickly access a house name using houseID
        /// </summary>
        /// <param name="houseID"></param>
        /// <returns></returns>
        public string GetMajorHouseName(int houseID)
        {
            string houseName = "";
            MajorHouse house = new MajorHouse();
            if(dictMajorHouses.TryGetValue(houseID, out house))
            { houseName = house.Name; }
            return houseName;
        }

        /// <summary>
        /// Returns name of house (major, minor or Inn) using Ref ID
        /// </summary>
        /// <param name="refID"></param>
        /// <returns></returns>
        public string GetHouseName(int refID)
        {
            string houseName = "";
            House house = new House();
            if (dictAllHouses.TryGetValue(refID, out house))
            { houseName = house.Name; }
            return houseName;
        }

        internal Dictionary<int, MajorHouse> GetAllMajorHouses()
        { return dictMajorHouses; }

        internal Dictionary<int, Passive> GetRoyalCourt()
        { return dictRoyalCourt; }

        /// <summary>
        /// Returns Great house if found, otherwise null, keyed of
        /// </summary>
        /// <param name="houseID"></param>
        /// <returns></returns>
        internal MajorHouse GetMajorHouse(int houseID)
        {
            MajorHouse house = new MajorHouse();
            if (dictMajorHouses.TryGetValue(houseID, out house))
            { return house; }
            return null;
        }

        /// <summary>
        /// Returns house (any type) if found, otherwise null, keyed off refID)
        /// </summary>
        /// <param name="refID"></param>
        /// <returns></returns>
        internal House GetHouse(int refID)
        {
            House house = new House();
            if (dictAllHouses.TryGetValue(refID, out house))
            { return house; }
            return null;
        }

        /// <summary>
        /// Query to return list of strings containing selected actor's personal history
        /// </summary>
        /// <param name="actorID"></param>
        /// <returns></returns>
        private List<string> GetActorRecords(int actorID)
        {
            List<string> actorRecords = new List<string>();
            //query
            IEnumerable<string> actorHistory =
                from actor in dictRecords
                from actID in actor.Value.listOfActors
                where actID == actorID
                orderby actor.Value.Year
                select Convert.ToString(actor.Value.Year + " " + actor.Value.Text);
            //place filtered data into list
            actorRecords = actorHistory.ToList();
            return actorRecords;
        }

        /// <summary>
        /// Query to return list of strings containing selected house's history
        /// </summary>
        /// <param name="refID"></param>
        /// <returns></returns>
        private List<string> GetHouseRecords(int refID)
        {
            List<string> houseRecords = new List<string>();
            //query
            IEnumerable<string> houseHistory =
                from house in dictRecords
                from _refID in house.Value.listOfHouses
                where _refID == refID
                orderby house.Value.Year
                select Convert.ToString(house.Value.Year + " " + house.Value.Text);
            //place filtered data into list
            houseRecords = houseHistory.ToList();
            return houseRecords;
        }

        public int GetGreatHouseRefID(int houseID)
        {
            MajorHouse house = new MajorHouse();
            if (dictMajorHouses.TryGetValue(houseID, out house))
            { return house.RefID; }
            return 0;
        }

        internal GeoCluster GetGeoCluster(int geoID)
        {
            GeoCluster cluster = new GeoCluster();
            if (dictGeoClusters.TryGetValue(geoID, out cluster))
            { return cluster; }
            return null;
        }

        internal Skill GetTrait(int traitID)
        {
            Skill trait = new Skill();
            if (dictTraits.TryGetValue(traitID, out trait))
            { return trait; }
            return null;
        }

        internal Possession GetPossession(int possessionID)
        {
            Possession possession = new Possession();
            if (dictPossessions.TryGetValue(possessionID, out possession))
            { return possession; }
            return null;
        }


        internal void SetRecord(Record record)
        { if (record != null) { dictRecords.Add(record.trackerID, record); } }

        /// <summary>
        /// handle a new message appropriately
        /// </summary>
        /// <param name="message"></param>
        internal void SetMessage(Message message)
        {
            if (message != null)
            {
                RLColor color = RLColor.White;
                if (message.Type == MessageType.Activation) { color = Color._active; }
                //queue for the most recent messages to display at bottom right console window
                Snippet snippet = new Snippet(string.Format("Day {0}, {1}, {2}", message.Day, message.Year, message.Text), color, RLColor.Black);
                messageQueue.Enqueue(snippet);
                //max 8 entries in queue at any one time
                if (messageQueue.Count > 8)
                { messageQueue.Dequeue(); }
                //add to dictionary
                dictMessages.Add(message.trackerID, message);
                //debug
                Console.WriteLine("Day {0}, {1}, {2} [{3}]", message.Day, message.Year, message.Text, message.Type);
            }
        }


        /// <summary>
        /// Store a new actor (child) in relevant dictionaries
        /// </summary>
        /// <param name="actor"></param>
        internal void SetPassiveActor(Passive actor)
        {
            dictPassiveActors.Add(actor.ActID, actor);
            dictAllActors.Add(actor.ActID, actor);
        }

        /// <summary>
        /// store a new actor (player and follower)
        /// </summary>
        /// <param name="actor"></param>
        internal void SetActiveActor(Active actor)
        {
            dictActiveActors.Add(actor.ActID, actor);
            dictAllActors.Add(actor.ActID, actor);
        }

        internal void SetRoyalCourt(Passive actor)
        { dictRoyalCourt.Add(actor.ActID, actor); }

        /// <summary>
        /// Returns a filtered set of Historical Records
        /// </summary>
        /// <param name="keyPress"></param>
        /// <returns></returns>
        internal List<Snippet> GetRecordSet(RLKeyPress keyPress)
        {
            List<string> tempList = new List<string>();
            List<Snippet> snippetList = new List<Snippet>();
            IEnumerable<string> recordList;
            switch (keyPress.Key)
            {
                case RLKey.A:
                    //All records
                    recordList =
                        from record in dictRecords
                        orderby record.Value.Year, record.Value.trackerID
                        select Convert.ToString(record.Value.Year + " " + record.Value.Text);
                    tempList = recordList.ToList();
                    break;
                case RLKey.C:
                    //CUSTOM (debugging purposes)
                    recordList =
                        from record in dictRecords
                        from eventType in record.Value.listOfActorIncidents
                        where eventType == HistActorIncident.Lordship
                        //where record.Value.Actual == false
                        orderby record.Value.Year
                        select Convert.ToString(record.Value.Year + " " + record.Value.Text);
                    tempList = recordList.ToList();
                    break;
                case RLKey.D:
                    //deaths
                    recordList =
                        from record in dictRecords
                        from eventType in record.Value.listOfActorIncidents
                        where eventType == HistActorIncident.Died
                        orderby record.Value.Year
                        select Convert.ToString(record.Value.Year + " " + record.Value.Text);
                    tempList = recordList.ToList();
                    break;
                case RLKey.G:
                    //Marriages
                    recordList =
                        from record in dictRecords
                        from eventType in record.Value.listOfActorIncidents
                        where eventType == HistActorIncident.Married
                        orderby record.Value.Year
                        select Convert.ToString(record.Value.Year + " " + record.Value.Text);
                    tempList = recordList.ToList();
                    break;
                case RLKey.K:
                    //Kingdom events
                    recordList =
                        from record in dictRecords
                        from eventType in record.Value.listOfKingdomIncidents
                        where eventType == HistKingdomIncident.Battle || eventType == HistKingdomIncident.Siege
                        orderby record.Value.Year
                        select Convert.ToString(record.Value.Year + " " + record.Value.Text);
                    tempList = recordList.ToList();
                    break;
            }
            foreach (string text in tempList)
            { snippetList.Add(new Snippet(text)); }
            return snippetList;
        }

        /// <summary>
        /// Returns a filtered set of Lore records
        /// </summary>
        /// <param name="keyPress"></param>
        /// <returns></returns>
        internal List<Snippet> GetLoreSet(RLKeyPress keyPress)
        {
            List<string> tempList = new List<string>();
            List<Snippet> snippetList = new List<Snippet>();
            switch (keyPress.Key)
            {
                case RLKey.U:
                    tempList.AddRange(Game.lore.GetUprising());
                    break;
                case RLKey.F:
                    tempList.AddRange(Game.lore.GetRoyalFamilyFate());
                    break;
            }
            foreach (string text in tempList)
            { snippetList.Add(new Snippet(text)); }
            return snippetList;
        }

        /// <summary>
        /// Generate a list of All Secrets
        /// </summary>
        /// <returns></returns>
        public List<Snippet> ShowSecretsRL()
        {
            /*List<string> tempList = new List<string>();
            IEnumerable<string> secretList =
                from secret in dictSecrets
                orderby secret.Value.Year
                select Convert.ToString(secret.Value.Year + " " + secret.Value.Description);
            tempList = secretList.ToList();*/
            List <string> tempList = GetPossessionsList(PossessionType.Secret);
            //snippet list
            List<Snippet> listData = new List<Snippet>();
            foreach(string data in tempList)
            { listData.Add(new Snippet(data)); }
            return listData;
        }

        /// <summary>
        /// Generate a list of All Messages
        /// </summary>
        /// <returns></returns>
        public List<Snippet> ShowMessagesRL()
        {
            List<Snippet> tempList = new List<Snippet>();
            RLColor color = RLColor.White;
            foreach(var message in dictMessages)
            {
                if (message.Value.Type == MessageType.Activation) { color = Color._active; }
                else { color = RLColor.White; }
                tempList.Add(new Snippet(string.Format("Day {0}, {1}, {2}", message.Value.Day, message.Value.Year, message.Value.Text), color, RLColor.Black));
            }
            return tempList;
        }

        /// <summary>
        /// return 8 most recent messages to display at bottom right console window
        /// </summary>
        /// <returns></returns>
        public List<Snippet> ShowRecentMessagesRL()
        {
            List<Snippet> tempList = new List<Snippet>();
            tempList.Add(new Snippet("--- Message Log Recent", RLColor.Yellow, RLColor.Black));
            tempList.AddRange(messageQueue.ToList());
            return tempList;
        }
        

        /// <summary>
        /// gets the correct advisor type and returns as a string for display purposes
        /// </summary>
        /// <param name="advisor"></param>
        /// <returns></returns>
        private string GetAdvisorType(Advisor advisor)
        {
            string type = "unknown";
            if (advisor.advisorRoyal > 0)
            { type = Convert.ToString(advisor.advisorRoyal); }
            else if (advisor.advisorNoble > 0)
            { type = Convert.ToString(advisor.advisorNoble); }
            return type;
        }

        /*
        internal void InitialiseWorldHistory()
        {
            //Generate History
            Game.history.InitialiseOverthrow(dictPassiveActors);
            //need to be here for sequencing issues
            Game.history.InitialiseLordRelations();
            Game.history.InitialisePastHistoryHouses();
        }*/

        /// <summary>
        /// debug: highlights duplicate names in imported files
        /// </summary>
        /// <returns></returns>
        internal List<Snippet> ShowDuplicatesRL()
        {
            //get duplicates
            List<string> listOfStrings = new List<string>(Game.history.GetDuplicatesNames());
            List<Snippet> listOfDuplicates = new List<Snippet>();
            //convert to snippets
            foreach(string name in listOfStrings)
            { listOfDuplicates.Add(new Snippet(name)); }
            return listOfDuplicates;
        }

        /// <summary>
        /// if specified actor present at location then True
        /// </summary>
        /// <param name="actorID"></param>
        /// <param name="locID"></param>
        /// <returns></returns>
        public bool CheckActorPresent(int actorID, int locID)
        {
            Location loc = Game.network.GetLocation(locID);
            return loc.CheckActorStatus(actorID);
        }

        /// <summary>
        /// permanently remove an actor from relevant dictionaries
        /// </summary>
        /// <param name="actorID"></param>
        public void RemovePassiveActor(int actorID)
        {
            if (!dictAllActors.Remove(actorID))
            { Game.SetError(new Error(37, "ActorID not found")); }
            if (!dictPassiveActors.Remove(actorID))
            { Game.SetError(new Error(37, "ActorID not found")); }
        }

        /// <summary>
        /// add a new actor to relevant dictionaries
        /// </summary>
        /// <param name="actor"></param>
        public void AddPassiveActor(Passive actor)
        {
            if (actor != null)
            {
                try
                {
                    dictAllActors.Add(actor.ActID, actor);
                    dictPassiveActors.Add(actor.ActID, actor);
                }
                catch (Exception e)
                { Game.SetError(new Error(60, e.Message)); }
            }
            else { Game.SetError(new Error(38, "null Actor input")); }
        }

        /// <summary>
        /// returns all availabe living Knights
        /// </summary>
        /// <returns></returns>
        public List<int> GetKnights()
        {
            List<int> listOfKnights = new List<int>();
            IEnumerable<int> knights =
                from person in dictPassiveActors
                where person.Value.Type == ActorType.Knight && person.Value.Status != ActorStatus.Gone
                orderby person.Value.ActID
                select person.Value.ActID;
            listOfKnights = knights.ToList();
            return listOfKnights;
        }

        /// <summary>
        /// handles all start (day 0) Game stuff
        /// </summary>
        public void ProcessStartGame()
        {
            Console.WriteLine(Environment.NewLine + "--- Start Game");
            Game.history.AgePassiveCharacters(dictPassiveActors);
            CalculateCrows();
            
        }

        /// <summary>
        /// handles all pre-turn stuff
        /// </summary>
        public void ProcessStartTurn()
        {
            Console.WriteLine(Environment.NewLine + "--- Start Turn Day {0}", Game.gameTurn + 1);
            CalculateCrows();
            //Create events
            Game.director.CheckPlayerEvents();
            Game.director.CheckFollowerEvents(dictActiveActors);
            //Player events first
            if (Game.director.ResolvePlayerEvents())
            { Game._specialMode = SpecialMode.PlayerEvent; }
            else
            {
                //Follwer events last
                if (Game.director.ResolveFollowerEvents())
                { Game._specialMode = SpecialMode.FollowerEvent; }
            }
            //position of all key characters on map
            UpdateFollowerPositions();
            UpdateEnemiesPositions();
        }

        /// <summary>
        /// handles all end of turn stuff
        /// </summary>
        public void ProcessEndTurn()
        {
            Console.WriteLine(Environment.NewLine + "--- End Turn Day {0}", Game.gameTurn + 1);
            Game.map.UpdateMap();
            Game.map.UpdateActiveCharacters(MoveActors());
            Game.director.HousekeepEvents();
            Game.director.CheckEventTimers();
            UpdateActors();
            Game.gameTurn++;
        }

        /// <summary>
        /// Calculates crow %'s at start of trun
        /// </summary>
        private void CalculateCrows()
        {
            int distance, chance;
            //Player is assumed to be the first record in dictActiveActors
            Player player = (Player)GetActiveActor(1);
            Position posPlayer = player.GetActorPosition();
            //Top up Player Crows to the maximum allowed
            player.CrowsNumber = Game.constant.GetValue(Global.CROW_NUMBER);
            //loop through active players
            foreach (var actor in dictActiveActors)
            {
                if (actor.Value is Follower)
                {
                    actor.Value.ClearCrowTooltips();
                    actor.Value.Activated = false;
                    Position pos = actor.Value.GetActorPosition();
                    distance = Game.utility.GetDistance(posPlayer.PosX, posPlayer.PosY, pos.PosX, pos.PosY);
                    chance = 100 - (distance * 2) + actor.Value.CrowBonus;
                    chance = Math.Min(100, chance);

                    if (player.Status != ActorStatus.AtLocation)
                    {
                        //no crows can be sent if Player isn't at a Location
                        actor.Value.CrowChance = 0;
                        actor.Value.CrowBonus = 0;
                        actor.Value.CrowDistance = distance;
                        //actor.Value.CrowBonus = 0;
                        actor.Value.AddCrowTooltip("No crows can be sent, or received, if the Player is travelling");
                    }
                    else
                    {
                        if (actor.Value.Status == ActorStatus.AtLocation)
                        {
                            if (actor.Value.LocID != player.LocID)
                            {
                                //Normal operations -> Player and Follower both at a Location
                                actor.Value.CrowChance = chance;
                                actor.Value.CrowDistance = distance;
                                //actor.Value.CrowBonus = 0;
                                actor.Value.AddCrowTooltip(string.Format("Chance is {0}%  (One hundred less distance doubled plus any bonus)", chance));
                                if (actor.Value.CrowBonus > 0)
                                {
                                    actor.Value.AddCrowTooltip(string.Format("Includes a cumulative bonus of +{0}% from previous failed crows that might be delayed",
                                      Game.constant.GetValue(Global.CROW_BONUS)));
                                }
                            }
                            else
                            {
                                //both at the same location -> no crow required and automatic activation
                                actor.Value.Activated = true;
                                actor.Value.CrowChance = 100;
                                actor.Value.AddCrowTooltip("Automatic activation as at the same location as the Player");
                            }
                        }
                        else
                        {
                            //no crows can be sent if Follower isn't at a Location
                            actor.Value.CrowChance = 0;
                            actor.Value.CrowDistance = distance;
                            actor.Value.CrowBonus = 0;
                            actor.Value.AddCrowTooltip("No crows can be sent to the Follower if they are travelling");
                        }
                    }
                    if (distance > 0)
                    { actor.Value.AddCrowTooltip(string.Format("Distance from Player is {0} leagues, as the crow flies", distance)); }
                }
            }
        }

        /// <summary>
        /// Send a crow to a loyal follower
        /// </summary>
        public List<Snippet> SendCrow(int actorID)
        {
            List<Snippet> listSnippet = new List<Snippet>();
            string description, messageText, locName;
            int chance, num;
            Active actor = GetActiveActor(actorID);
            Player player = (Player)GetActiveActor(1);
            int bonus = Game.constant.GetValue(Global.CROW_BONUS);
            if (player.CrowsNumber > 0)
            {
                if (actor != null)
                {
                    if (actorID != 1)
                    {
                        if (actor.Status == ActorStatus.AtLocation)
                        {
                            if (actor.LocID != player.LocID)
                            {
                                if (actor.Delay == 0)
                                {
                                    if (actor.Activated == false)
                                    {
                                        locName = GetLocationName(actor.LocID);
                                        num = rnd.Next(100);
                                        chance = actor.CrowChance + actor.CrowBonus;
                                        description = string.Format("chance of Crow arriving {0}%, or less. Roll {1}", chance, num);
                                        listSnippet.Add(new Snippet(string.Format("Crow dispatched to {0}, Aid {1}, at {2} (distance {3} leagues)", actor.Name, actor.ActID, locName, actor.CrowDistance)));
                                        player.CrowsNumber--;
                                        messageText = string.Format("Crow sent to {0}, Aid {1}, at {2} ({3}% chance of arriving, roll {4}, {5})", actor.Name, actor.ActID, locName, chance,
                                            num, num < chance ? "Arrived" : "Failed");
                                        //Game.messageLog.Add(new Snippet(messageText));
                                        Message message = new Message(messageText, actor.ActID, actor.LocID, MessageType.Crow);
                                        SetMessage(message);
                                        if (num < chance)
                                        {
                                            //success!
                                            actor.Activated = true;
                                            actor.CrowBonus = 0;
                                            listSnippet.Add(new Snippet(string.Format("Crow success! {0} activated ({1})", actor.Name, description), RLColor.Yellow, RLColor.Black));
                                            //Game.messageLog.Add(new Snippet(string.Format("Crow arrived, {0} activated", actor.Name)));
                                            Message message_1 = new Message(string.Format("{0}, Aid {1}, has been Activated", actor.Name, actor.ActID), MessageType.Activation);
                                            SetMessage(message_1);
                                        }
                                        else
                                        //failed the roll, apply bonus
                                        {
                                            actor.Activated = false;
                                            listSnippet.Add(new Snippet(string.Format("The Crow failed to arrive ({0})", description)));
                                            actor.CrowBonus += bonus;
                                            actor.AddCrowTooltip(string.Format("An additional bonus of +{0}% applies from a previous failed crow that might have been delayed", bonus));
                                        }
                                        listSnippet.Add(new Snippet(string.Format("You have {0} {1} remaining", player.CrowsNumber, player.CrowsNumber == 1 ? "Crow" : "Crows")));
                                    }
                                    else
                                    //already activated
                                    { listSnippet.Add(new Snippet(string.Format("{0} is already activated and awaiting your orders!", actor.Name))); }
                                }
                                else
                                {
                                    //actor delayed
                                    { listSnippet.Add(new Snippet(string.Format("Crow can NOT be dispatched to {0} as they are delayed (\"{1}\"", actor.Name, actor.DelayReason))); }
                                }
                            }
                            else
                            {
                                //at same location as player
                                listSnippet.Add(new Snippet(string.Format("No crow required as {0} is present at the same location as yourself", actor.Name)));
                                actor.Activated = true;
                            }
                        }
                        else
                        //actor not at a location
                        { listSnippet.Add(new Snippet(string.Format("Crow can NOT be dispatched to {0} as they aren't at a location", actor.Name))); }
                    }
                    else
                    //sending a crow to yourself
                    { listSnippet.Add(new Snippet("There is no need to send a crow to yourself!")); }
                }
                else
                //invalid actor
                { listSnippet.Add(new Snippet("Unknown Actor. No crow sent.")); }
            }
            else
            //run out of crows
            { listSnippet.Add(new Snippet("You have run out of crows. More will be available next turn")); }

            return listSnippet;
        }

        /// <summary>
        /// provides # of crows remaining
        /// </summary>
        /// <returns></returns>
        public int GetCrowsAvailable()
        {
            Player player = (Player)GetActiveActor(1);
            //snippet = new Snippet(string.Format("You have {0} {1} remaining", numCrows, numCrows == 1 ? "Crow" : "Crows"));
            return player.CrowsNumber;
        }

        /// <summary>
        /// handles end of turn housekeeping for all actor types
        /// </summary>
        private void UpdateActors()
        {
            //All actors -> decrement any Condition timers
            foreach(var actor in dictAllActors)
            {
                if (actor.Value.CheckConditions() == true)
                { actor.Value.UpdateConditionTimers(); }
            }
            //Active actors -> decrement any delays
            foreach (var actor in dictActiveActors)
            {
                if (actor.Value.Delay > 0)
                {
                    actor.Value.Delay--;
                    if (actor.Value.Delay == 0)
                    { actor.Value.DelayReason = null; }
                }
            }
        }

        /// <summary>
        /// returns number of object types in dictionary
        /// </summary>
        /// <param name="possType"></param>
        /// <returns></returns>
        internal int CountPossessions(PossessionType possType)
        {
            int num = 0;
            switch (possType)
            {
                case PossessionType.Secret:
                    var result = from possObject in dictPossessions
                                 where possObject.Value is Secret
                                 select possObject;
                    num = result.Count();
                    break;
                case PossessionType.None:
                    Game.SetError(new Error(120, "Invalid possType Input (None)"));
                    break;
                default:
                    Game.SetError(new Error(120, string.Format("Invalid possType Input (\"{0}\")", possType)));
                    break;
            }
            return num;
        }

        /// <summary>
        /// returns a list of year + description of the specific object type in dictionary
        /// </summary>
        /// <param name="possType"></param>
        /// <returns></returns>
        internal List<string> GetPossessionsList(PossessionType possType)
        {
            List<string> tempList = new List<string>();
            switch (possType)
            {
                case PossessionType.Secret:
                    IEnumerable<string> secretList =
                    from secret in dictPossessions
                    where secret.Value is Secret
                    orderby secret.Value.Year
                    select Convert.ToString(secret.Value.Year + " " + secret.Value.Description);
                    tempList = secretList.ToList();
                    break;
                case PossessionType.None:
                    Game.SetError(new Error(121, "Invalid possType Input (None)"));
                    break;
                default:
                    Game.SetError(new Error(121, string.Format("Invalid possType Input (\"{0}\")", possType)));
                    break;
            }

            return tempList;
        }

        /// <summary>
        /// checks all active followers and updates their position on the map 'Information' layer (used to show characters if the Information toggle is pressed ("I")
        /// </summary>
        private void UpdateFollowerPositions()
        {
            Game.map.ClearMapLayer(MapLayer.Followers);
            foreach(var follower in dictActiveActors)
            {
                if (follower.Key > 0 && follower.Value.Status != ActorStatus.Gone)
                {
                    Position pos = follower.Value.GetActorPosition();
                    Game.map.SetMapInfo(MapLayer.Followers, pos.PosX, pos.PosY, follower.Key);
                }
            }
        }

        /// <summary>
        /// shows all known enemies
        /// </summary>
        private void UpdateEnemiesPositions()
        {
            Game.map.ClearMapLayer(MapLayer.Enemies);
            //debug
            int mapSize = Game.constant.GetValue(Global.MAP_SIZE);
            for (int i = 0; i < 3; i++)
            {
                int posX = rnd.Next(0, mapSize);
                int posY = rnd.Next(0, mapSize);
                int num = rnd.Next(1, 4);
                Game.map.SetMapInfo(MapLayer.Enemies, posX, posY, num);
            }
            //is KNOWN, is age < 4 days => show

            //dictEnemies
        }


        //new Methods above here
    }
}